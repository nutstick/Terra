{"version":3,"file":"terra.iife.js","sources":["../src/Core/MapSettings.ts","../src/Math/Cartesian.ts","../src/Math/Ellipsoid.ts","../src/Utility/SphericalMercator.ts","../src/Utility/MapUtility.ts","../src/Object/RenderingObject.ts","../src/Object/Mission.ts","../src/Object/Pin.ts","../src/Object/Polygon.ts","../src/Object/Polyline.ts","../src/Object/Skybox.ts","../src/Object/Vehicle.ts","../src/Renderer/Camera.ts","../src/Renderer/OrbitConstraint.ts","../src/Renderer/OrbitControls.ts","../src/Utility/GeometricHelper.ts","../src/Core/Pool.ts","../src/Core/TileReplacementQueue.ts","../src/Core/QuadTree.ts","../src/Core/Map3D.ts","../src/Core/TilingScheme.ts","../src/DataSource/DataSource.ts","../src/DataSource/DataSourceLayer.ts","../src/DataSource/ImageDataLayer.ts","../src/DataSource/Provider.ts","../src/DataSource/ImageryProvider.ts","../src/Math/AABB.ts","../src/SceneMode/SceneMode.ts","../src/SceneMode/Tile.ts","../src/SceneMode/Tile2D.ts","../src/SceneMode/Scene2D.ts","../src/DataSource/EPSG4326MapImageDataLayer.ts","../src/DataSource/EPSG4326MapImageryProvider.ts","../src/SceneMode/TestTile.ts","../src/SceneMode/TestScene.ts","../src/DataSource/BingMapImageryProvider.ts","../src/SceneMode/BingMapScene.ts","../src/Utility/TypeConversion.ts","../src/DataSource/STKTerrainDataLayer.ts","../src/DataSource/STKTerrainProvider.ts","../src/SceneMode/STKTerrainTile.ts","../src/SceneMode/STKTerrainScene.ts"],"sourcesContent":["export const MapSettings = {\r\n    basePlaneDimension: 20037508.342789244 * 2, // Math.pow(2, 16),\r\n    cameraDistance: 1200000, // * Math.pow(2, 16),\r\n    maxCameraDistance: 1200000 * 100,\r\n    debug: true,\r\n    optimize: true,\r\n};\r\n","import * as THREE from 'three';\r\n\r\nexport interface CartesianOptions {\r\n    x?: number;\r\n    y?: number;\r\n    z?: number;\r\n    height?: number;\r\n}\r\n\r\nconst matrix = new THREE.Matrix4();\r\nexport class Cartesian {\r\n    private _x: number = 0;\r\n    private _y: number = 0;\r\n    private _z: number = 0;\r\n\r\n    constructor(options?: CartesianOptions) {\r\n        options = options || {};\r\n        this._x = options.x || 0;\r\n        this._y = options.y || 0;\r\n        this._z = options.height || options.z || 0;\r\n    }\r\n\r\n    set(x, y, z) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    dot(...args): number {\r\n        return THREE.Vector3.prototype.dot.call(this, ...args);\r\n    }\r\n\r\n    add(o) {\r\n        this._x += o.x;\r\n        this._y += o.y;\r\n        this._z += o.z;\r\n        return this;\r\n    }\r\n    sub(o) {\r\n        this._x -= o.x;\r\n        this._y -= o.y;\r\n        this._z -= o.z;\r\n        return this;\r\n    }\r\n    crossVectors(...args): Cartesian {\r\n        return THREE.Vector3.prototype.crossVectors.call(this, ...args);\r\n    }\r\n    addVectors = THREE.Vector3.prototype.addVectors;\r\n    subVectors(a, b) {\r\n        this._x = a.x - b.x;\r\n        this._y = a.y - b.y;\r\n        this._z = a.z - b.z;\r\n        return this;\r\n    }\r\n    normalize = THREE.Vector3.prototype.normalize;\r\n    length = THREE.Vector3.prototype.length;\r\n    multiplyScalar = THREE.Vector3.prototype.multiplyScalar;\r\n    divideScalar = THREE.Vector3.prototype.divideScalar;\r\n\r\n    clone() {\r\n        return new Cartesian({\r\n            x: this._x,\r\n            y: this._y,\r\n            z: this._z,\r\n        });\r\n    }\r\n\r\n    copy(other) {\r\n        this._x = other.x;\r\n        this._y = other.y;\r\n        this._z = other.z;\r\n    }\r\n\r\n    unproject(camera) {\r\n        const print = (m) => {\r\n            return `${m[0]} ${m[1]} ${m[2]} ${m[3]}\r\n                ${m[4]} ${m[5]} ${m[6]} ${m[7]}\r\n                ${m[8]} ${m[9]} ${m[10]} ${m[11]}\r\n                ${m[12]} ${m[13]} ${m[14]} ${m[15]}`;\r\n        };\r\n        // console.log(print(camera.matrixWorld.elements));\r\n        // console.log(print(matrix.getInverse(camera.projectionMatrix).elements));\r\n        matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));\r\n        return this.applyMatrix4(matrix);\r\n    }\r\n\r\n    applyMatrix4(m) {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const z = this.z;\r\n        const e = m.elements;\r\n\r\n        const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n        this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n        this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n        this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n        return this;\r\n    }\r\n\r\n    get x() { return this._x; }\r\n    set x(x) { this._x = x; }\r\n    get y() { return this._y; }\r\n    set y(y) { this._y = y; }\r\n    get z() { return this._z; }\r\n    set z(z) { this._z = z; }\r\n    get height() { return this._y; }\r\n    set height(height) { this._y = height; }\r\n}\r\n","import { Cartesian } from './Cartesian';\r\n\r\nfunction initialize(ellipsoid, x, y, z) {\r\n    x = x || 0.0;\r\n    y = y || 0.0;\r\n    z = z || 0.0;\r\n\r\n    ellipsoid._radii = new Cartesian({ x, y, z });\r\n\r\n    ellipsoid._radiiSquared = new Cartesian({ x: x * x, y: y * y, z: z * z });\r\n\r\n    ellipsoid._radiiToTheFourth = new Cartesian({ x: x * x * x * x, y: y * y * y * y, z: z * z * z * z });\r\n\r\n    ellipsoid._oneOverRadii = new Cartesian({ x: x === 0.0 ? 0.0 : 1.0 / x,\r\n        y: y === 0.0 ? 0.0 : 1.0 / y,\r\n        z: z === 0.0 ? 0.0 : 1.0 / z });\r\n\r\n    ellipsoid._oneOverRadiiSquared = new Cartesian({ x: x === 0.0 ? 0.0 : 1.0 / (x * x),\r\n        y: y === 0.0 ? 0.0 : 1.0 / (y * y),\r\n        z: z === 0.0 ? 0.0 : 1.0 / (z * z) });\r\n\r\n    ellipsoid._minimumRadius = Math.min(x, y, z);\r\n\r\n    ellipsoid._maximumRadius = Math.max(x, y, z);\r\n\r\n    // ellipsoid._centerToleranceSquared = CesiumMath.EPSILON1;\r\n\r\n    if (ellipsoid._radiiSquared.z !== 0) {\r\n        ellipsoid._squaredXOverSquaredZ = ellipsoid._radiiSquared.x / ellipsoid._radiiSquared.z;\r\n    }\r\n}\r\n\r\n/**\r\n * A quadratic surface defined in Cartesian coordinates by the equation\r\n * <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\r\n * by Cesium to represent the shape of planetary bodies.\r\n *\r\n * Rather than constructing this object directly, one of the provided\r\n * constants is normally used.\r\n * @alias Ellipsoid\r\n * @constructor\r\n *\r\n * @param {Number} [x=0] The radius in the x direction.\r\n * @param {Number} [y=0] The radius in the y direction.\r\n * @param {Number} [z=0] The radius in the z direction.\r\n *\r\n * @exception {DeveloperError} All radii components must be greater than or equal to zero.\r\n *\r\n * @see Ellipsoid.fromCartesian3\r\n * @see Ellipsoid.WGS84\r\n * @see Ellipsoid.UNIT_SPHERE\r\n */\r\nexport class Ellipsoid {\r\n    _radii: Cartesian;\r\n    _radiiSquared: Cartesian;\r\n    _radiiToTheFourth: Cartesian;\r\n    _oneOverRadii: Cartesian;\r\n    _oneOverRadiiSquared: Cartesian;\r\n    _minimumRadius: number;\r\n    _maximumRadius: number;\r\n    _centerToleranceSquared: Cartesian;\r\n    _squaredXOverSquaredZ: number;\r\n\r\n    constructor(x, y, z) {\r\n        initialize(this, x, y, z);\r\n    }\r\n\r\n    get radii() {\r\n        return this._radii;\r\n    }\r\n\r\n    get radiiSquared() {\r\n        return this._radiiSquared;\r\n    }\r\n    get radiiToTheFourth() {\r\n        return this._radiiToTheFourth;\r\n    }\r\n    get oneOverRadii() {\r\n        return this._oneOverRadii;\r\n    }\r\n    get oneOverRadiiSquared() {\r\n        return this._oneOverRadiiSquared;\r\n    }\r\n    get minimumRadius() {\r\n        return this._minimumRadius;\r\n    }\r\n    get maximumRadius() {\r\n        return this._maximumRadius;\r\n    }\r\n    get a() {\r\n        return Math.PI * this._maximumRadius;\r\n    }\r\n\r\n    static WGS84 = new Ellipsoid(6378137.0, 6378137.0, 6356752.3142451793);\r\n\r\n    static UNIT_SPHERE  = new Ellipsoid(1.0, 1.0, 1.0);\r\n}\r\n","import * as THREE from 'three';\r\nimport { MapSettings } from '../Core/MapSettings';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { Ellipsoid } from '../Math/Ellipsoid';\r\n\r\nexport interface SphericalMercatorOptions {\r\n    size?: number;\r\n}\r\n\r\ninterface CacheSize {\r\n    Bc?: number[];\r\n    Cc?: number[];\r\n    zc?: number[];\r\n    Ac?: number[];\r\n}\r\n\r\nconst EPSLN = 1.0e-10;\r\nconst D2R = Math.PI / 180;\r\nconst R2D = 180 / Math.PI;\r\nconst cache: { [key: number]: CacheSize } = {};\r\n\r\nexport enum System {\r\n    WGS84 = 0,\r\n    EPSG4326 = 1,\r\n    EPSG3857 = 2,\r\n}\r\n\r\nexport class SphericalMercator {\r\n    size: number;\r\n\r\n    Ac: number[];\r\n    zc: number[];\r\n    Cc: number[];\r\n    Bc: number[];\r\n\r\n    meterPerPixel: number;\r\n\r\n    constructor(options: SphericalMercatorOptions)  {\r\n        this.size = options.size || 256;\r\n        if (!cache[this.size]) {\r\n            let size = this.size;\r\n            const c: CacheSize = cache[this.size] = {};\r\n            c.Bc = [];\r\n            c.Cc = [];\r\n            c.zc = [];\r\n            c.Ac = [];\r\n            for (let d = 0; d < 30; ++d) {\r\n                c.Bc.push(size / 360);\r\n                c.Cc.push(size / (2 * Math.PI));\r\n                c.zc.push(size / 2);\r\n                c.Ac.push(size);\r\n                size *= 2;\r\n            }\r\n        }\r\n        this.Bc = cache[this.size].Bc;\r\n        this.Cc = cache[this.size].Cc;\r\n        this.zc = cache[this.size].zc;\r\n        this.Ac = cache[this.size].Ac;\r\n\r\n        this.meterPerPixel = this.mPerPixel(0);\r\n    }\r\n\r\n    mPerPixel(latitude?: number) {\r\n        latitude = latitude || 0;\r\n        return Math.abs(Ellipsoid.WGS84.maximumRadius * 2 * Math.PI * Math.cos(latitude * Math.PI / 180) / this.size);\r\n    }\r\n    PixelToCartographic(px: THREE.Vector3, cartographic: Cartographic) {\r\n        const g = (px.z + MapSettings.basePlaneDimension / 2 - this.zc[0]) / (-this.Cc[0]);\r\n        cartographic.longitude = Math.min((px.x + MapSettings.basePlaneDimension / 2 - this.zc[0]) / this.Bc[0],\r\n            180 - EPSLN);\r\n        cartographic.latitude = R2D * (2 * Math.atan(Math.exp(g)) - 0.5 * Math.PI);\r\n        const meterPerPixel = this.mPerPixel(cartographic.latitude);\r\n        cartographic.altitude = px.y * meterPerPixel;\r\n    }\r\n    CartographicToPixel(coordinate: Cartographic, px: THREE.Vector3) {\r\n        const d = this.zc[0];\r\n        const f = Math.min(Math.max(Math.sin(D2R * coordinate.latitude), -0.9999), 0.9999);\r\n        let x = (d + coordinate.longitude * this.Bc[0]);\r\n        let y = (d + 0.5 * Math.log((1 + f) / (1 - f)) * (-this.Cc[0]));\r\n        if (x > this.Ac[0]) {\r\n            x = this.Ac[0];\r\n        }\r\n        if (y > this.Ac[0]) {\r\n            y = this.Ac[0];\r\n        }\r\n\r\n        // if (x < 0) x = 0;\r\n        // if (y < 0) y = 0;\r\n        px.x = x - MapSettings.basePlaneDimension / 2;\r\n        px.y = coordinate.altitude / this.mPerPixel(0);\r\n        px.z = y - MapSettings.basePlaneDimension / 2;\r\n        return px;\r\n    }\r\n    /**\r\n     * Convert given lat/lon in WGS84 Datum to XY in Spherical Mercator EPSG:900913\r\n     * @param {QtPositioning.coordinate} coordinate\r\n     * @param {Cartesian} cartesian\r\n     *\r\n     * @return {Cartesian}\r\n     */\r\n    CartographicToCartesian(cartographic: Cartographic, cartesian: Cartesian) {\r\n        const d = this.zc[0];\r\n        const f = Math.min(Math.max(Math.sin(D2R * cartographic.latitude), -0.9999), 0.9999);\r\n        let x = (d + cartographic.longitude * this.Bc[0]);\r\n        let y = (d + 0.5 * Math.log((1 + f) / (1 - f)) * (-this.Cc[0]));\r\n        if (x > this.Ac[0]) {\r\n            x = this.Ac[0];\r\n        }\r\n        if (y > this.Ac[0]) {\r\n            y = this.Ac[0];\r\n        }\r\n\r\n        // if (x < 0) x = 0;\r\n        // if (y < 0) y = 0;\r\n        cartesian.x = x - MapSettings.basePlaneDimension / 2;\r\n        cartesian.y = cartographic.altitude / this.mPerPixel(0);\r\n        cartesian.z = y - MapSettings.basePlaneDimension / 2;\r\n        return cartesian;\r\n\r\n        // TODO:\r\n        // const longitude = cartographic.longitude;\r\n        // const latitude = cartographic.latitude;\r\n        // const mX = longitude * Ellipsoid.WGS84.a;\r\n        // let mY = Math.log(Math.tan((90 + latitude) * D2R / 2)) * R2D;\r\n        // mY = mY * Ellipsoid.WGS84.a / 180.0;\r\n        // cartesian.x = mX;\r\n        // cartesian.y = mY;\r\n        // cartesian.height = cartographic.altitude;\r\n        // return cartesian;\r\n    }\r\n    FCartographicToCartesian(cartographic: Cartographic, cartesian: Cartesian) {\r\n        const d = this.zc[0];\r\n        // const f = Math.min(Math.max(Math.sin(D2R * cartographic.latitude), -1), 1);\r\n        const x = (d + cartographic.longitude * this.Bc[0]);\r\n        const y = (d + 2 * cartographic.latitude * (-this.Bc[0]));\r\n        // let y = (d + 0.5 * Math.log((1 + f) / (1 - f)) * (-this.Cc[0]));\r\n        cartesian.x = x - MapSettings.basePlaneDimension / 2;\r\n        cartesian.y = cartographic.altitude / this.mPerPixel(0);\r\n        cartesian.z = y - MapSettings.basePlaneDimension / 2;\r\n        return cartesian;\r\n    }\r\n    CartesianToCartographic(cartesian: Cartesian, cartographic: Cartographic) {\r\n        const g = (cartesian.z + MapSettings.basePlaneDimension / 2 - this.zc[0]) / (-this.Cc[0]);\r\n        cartographic.longitude = Math.min((cartesian.x + MapSettings.basePlaneDimension / 2 - this.zc[0]) / this.Bc[0],\r\n            180 - EPSLN);\r\n        cartographic.latitude = R2D * (2 * Math.atan(Math.exp(g)) - 0.5 * Math.PI);\r\n        const meterPerPixel = this.mPerPixel(cartographic.latitude);\r\n        cartographic.altitude = cartesian.y * meterPerPixel;\r\n    }\r\n\r\n    CartographicToEPSG4326(cartographic: Cartographic, cartesian: Cartesian) {\r\n        cartesian.x = cartographic.longitude / 90 * Ellipsoid.WGS84.maximumRadius;\r\n        cartesian.y = cartographic.altitude;\r\n        cartesian.z = cartographic.latitude / 90 * Ellipsoid.WGS84.maximumRadius;\r\n    }\r\n}\r\n\r\nexport const sphericalMercator = new SphericalMercator({ size: MapSettings.basePlaneDimension });\r\n","import * as THREE from 'three';\r\nimport { sphericalMercator } from './SphericalMercator';\r\n\r\nconst screenPosition = new THREE.Vector2();\r\n\r\nexport class MapUtility {\r\n    static ground(position) {\r\n        const _ = position.clone();\r\n        // FIXME: ground = 0 by now\r\n        _.y = 0;\r\n        return _;\r\n    }\r\n\r\n    static tenMeters(latitude?: number) {\r\n        return 10 / (latitude ? sphericalMercator.mPerPixel(latitude) : sphericalMercator.meterPerPixel);\r\n    }\r\n\r\n    static rayCasterFromScreen(primitive, x, y, picker) {\r\n        screenPosition.set((x / primitive.canvas.width) * 2 - 1, -(y / primitive.canvas.height) * 2 + 1);\r\n        picker.setFromCamera(screenPosition, primitive.camera);\r\n\r\n        return picker;\r\n    }\r\n\r\n    static lerp(p, q, time) {\r\n        return ((1.0 - time) * p) + (time * q);\r\n    }\r\n}\r\n","import { Cartesian } from '../Math/Cartesian';\r\n\r\nexport abstract class RenderingObject {\r\n    abstract updateTarget(target: Cartesian);\r\n\r\n    abstract coordinate(): Cartographic;\r\n\r\n    abstract getScale(): number;\r\n    abstract setScale(scale: number);\r\n}\r\n","import { Map3D } from '../Core/Map3D';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { OrbitControls } from '../Renderer/OrbitControls';\r\nimport { Pin } from './Pin';\r\nimport { RenderingObject } from './RenderingObject';\r\n\r\nexport interface MissionOptions {\r\n    map: Map3D;\r\n}\r\n\r\nexport abstract class Mission extends RenderingObject {\r\n    _map: Map3D;\r\n    constructor(options: MissionOptions) {\r\n        super();\r\n        this._map = options.map;\r\n    }\r\n\r\n    // abstract addPin(position: Cartographic | Cartesian, height: number)\r\n    abstract updatePin(index: number);\r\n    // abstract clearPins();\r\n    // abstract reindex(pin: Pin, index: number);\r\n    abstract interactableObjects(): THREE.Mesh[];\r\n\r\n    abstract onMouseDown(controls: OrbitControls, x: number, y: number, button: number): boolean;\r\n    abstract onMouseMove(controls: OrbitControls, x: number, y: number): boolean;\r\n\r\n    abstract get pins(): Pin[];\r\n}\r\n","import * as THREE from 'three';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { MapUtility } from '../Utility/MapUtility';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { Mission } from './Mission';\r\nimport { RenderingObject } from './RenderingObject';\r\n\r\nexport interface PinOptions {\r\n    mission: Mission;\r\n    index: number;\r\n    position: Cartographic | Cartesian;\r\n}\r\n\r\nexport interface Head extends THREE.Mesh {\r\n    pin: Pin;\r\n    geometry: THREE.Geometry;\r\n    material: THREE.Material;\r\n}\r\n\r\nexport interface Arrow extends THREE.Mesh {\r\n    pin: Pin;\r\n    geometry: THREE.Geometry;\r\n    material: THREE.Material;\r\n}\r\n\r\nexport class Pin extends RenderingObject {\r\n    _mission: Mission;\r\n    _index: number;\r\n\r\n    head: Head;\r\n    arrow: Arrow;\r\n    line: THREE.LineSegments;\r\n\r\n    group: THREE.Group;\r\n\r\n    _rGPosition: THREE.Vector3;\r\n    _rPosition: THREE.Vector3;\r\n    _position: Cartesian;\r\n    _coordinate: Cartographic;\r\n\r\n    lastScale: number;\r\n\r\n    constructor(options: PinOptions) {\r\n        super();\r\n        this._mission = options.mission;\r\n        this._index = options.index;\r\n\r\n        const headGeometry = new THREE.CylinderGeometry(3, 3, 8, 8, 1);\r\n        // Recalculate centroid of mesh offset by 8\r\n        for (let i = 0, len = headGeometry.vertices.length; i < len; i++) {\r\n            headGeometry.vertices[i].y += 8;\r\n        }\r\n\r\n        this.head = (new THREE.Mesh(\r\n            headGeometry,\r\n            new THREE.MeshBasicMaterial({ color: 0x3366ff, opacity: 0.8, transparent: true }),\r\n        ) as Head);\r\n        this.head.name = 'Head';\r\n        this.head.pin = this;\r\n\r\n        const arrowGeometry = new THREE.CylinderGeometry(4, 0, 6, 6, 1);\r\n        // Recalculate centroid\r\n        for (let i_ = 0, len_ = arrowGeometry.vertices.length; i_ < len_; i_++) {\r\n            arrowGeometry.vertices[i_].y += 3;\r\n        }\r\n        arrowGeometry.computeBoundingSphere();\r\n\r\n        this.arrow = (new THREE.Mesh(\r\n            arrowGeometry,\r\n            new THREE.MeshBasicMaterial({ color: 0xffff00, opacity: 0.8, transparent: true }),\r\n        ) as Arrow);\r\n        this.arrow.name = 'Arrow';\r\n        this.arrow.pin = this;\r\n\r\n        const lineGeometry = new THREE.Geometry();\r\n        lineGeometry.vertices.push(this.arrow.position);\r\n        lineGeometry.vertices.push(this.head.position);\r\n\r\n        this.line = new THREE.LineSegments(\r\n            lineGeometry,\r\n            new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 3, transparent: true, opacity: 0.8 }),\r\n        );\r\n        this.line.name = 'Line';\r\n        /**\r\n         * Pack of all mesh in pin (head, line, arrow)\r\n         * @type {THREE.Group}\r\n         */\r\n        this.group = new THREE.Group();\r\n        this.group.add(this.head);\r\n        this.group.add(this.line);\r\n        this.group.add(this.arrow);\r\n        this.group.name = 'Pin';\r\n        // TODO: Map should have addRenderingObject function instead of direct access to scene\r\n        this._mission._map.scene.add(this.group);\r\n\r\n        this._rGPosition = this.arrow.position;\r\n        this._rPosition = this.head.position;\r\n\r\n        // TODO: Can it be Carsetian\r\n        this._position = new Cartesian();\r\n        this._coordinate = QtPositioning.coordinate();\r\n        // Initialize pin position\r\n        this.position = options.position;\r\n        /**\r\n         * Last move scale of pin\r\n         * @type {number}\r\n         */\r\n        // TODO: lastScale inside mission or map so that no need to calculate on all pin\r\n        this.lastScale = 1.0;\r\n        // Add Target Subscribe to this object\r\n        this._mission._map.addSubscribeObject(this);\r\n    }\r\n    /**\r\n     * Free memory and remove pin from rendering\r\n     */\r\n    dispose() {\r\n        this.group.remove(this.head);\r\n        this.group.remove(this.line);\r\n        this._mission._map.removeSubscribeObject(this);\r\n        this._mission._map.scene.remove(this.group);\r\n        this._mission = undefined;\r\n        this.group = undefined;\r\n        // Clear Meshes\r\n        this.head.geometry.dispose();\r\n        this.head.material.dispose();\r\n        this.head = undefined;\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.line = undefined;\r\n        this.arrow.geometry.dispose();\r\n        this.arrow.material.dispose();\r\n        this.arrow = undefined;\r\n        this._rGPosition = undefined;\r\n        this._rPosition = undefined;\r\n        this._position = undefined;\r\n    }\r\n    updateTarget(target) {\r\n        // Update rendering position\r\n        this._rPosition.subVectors((this._position as any), target);\r\n        // TODO: elevation projection instead of 0\r\n        this._rGPosition.set(this._rPosition.x, 0, this._rPosition.z);\r\n        (this.line.geometry as THREE.Geometry).verticesNeedUpdate = true;\r\n    }\r\n\r\n    get position() { return this._position; }\r\n    set position(p: any) {\r\n        if (!p) {\r\n            this._position.y = MapUtility.tenMeters();\r\n        } else {\r\n            // Case position is a QtPositioning.coordiante\r\n            if (p.longitude) {\r\n                sphericalMercator.CartographicToCartesian(p, this._position);\r\n            } else {\r\n                this._position.copy(p);\r\n                // Default height is 10 meters\r\n                this._position.y = this._position.y || MapUtility.tenMeters();\r\n            }\r\n        }\r\n        // Update rendering position\r\n        this.updateTarget(this._mission._map.camera.target);\r\n\r\n        this._mission.updatePin(this._index);\r\n    }\r\n\r\n    get groundPosition() { return new THREE.Vector3(this._position.x, 0, this._position.y); }\r\n    set groundPosition(p: any) {\r\n        // Case position is a QtPositioning.coordiante\r\n        if (p.longitude) {\r\n            // TODO: Ground\r\n            sphericalMercator.CartographicToCartesian(p, this._position);\r\n            this._position.y = 0;\r\n        } else {\r\n            this._position.x = p.x;\r\n            this._position.z = p.z;\r\n        }\r\n\r\n        this.updateTarget(this._mission._map.camera.target);\r\n\r\n        this._mission.updatePin(this._index);\r\n    }\r\n\r\n    coordinate() {\r\n        sphericalMercator.CartesianToCartographic(this._position, this._coordinate);\r\n        return this._coordinate;\r\n    }\r\n\r\n    get height() { return this._position.y; }\r\n    set height(h) {\r\n        this._position.y = h;\r\n\r\n        this.updateTarget(this._mission._map.camera.target);\r\n\r\n        this._mission.updatePin(this._index);\r\n    }\r\n\r\n    getScale() { return this.lastScale; }\r\n    setScale(s: number) {\r\n        if (this.lastScale === s) {\r\n            return;\r\n        }\r\n\r\n        this.head.geometry.scale(s / this.lastScale, s / this.lastScale, s / this.lastScale);\r\n        this.arrow.geometry.scale(s / this.lastScale, s / this.lastScale, s / this.lastScale);\r\n        this.lastScale = s;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Geometry, Material } from 'three';\r\nimport { Map3D } from '../Core/Map3D';\r\nimport { MapSettings } from '../Core/MapSettings';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { OrbitControls } from '../Renderer/OrbitControls';\r\nimport { MapUtility } from '../Utility/MapUtility';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { Mission, MissionOptions } from './Mission';\r\nimport { Pin } from './Pin';\r\n\r\nconst panStart = new THREE.Vector2();\r\nconst picker = new THREE.Raycaster();\r\n\r\nconst panEnd = new THREE.Vector2();\r\nconst panDelta = new THREE.Vector2();\r\n\r\nconst px = new THREE.Vector3();\r\n\r\nexport interface PolygonOptions extends MissionOptions {}\r\n\r\nexport class Polygon extends Mission {\r\n    static STATE = { CHANGE_PIN_HEIGHT: -2, CHANGE_PIN_POSITION: -3 };\r\n\r\n    _map: Map3D;\r\n    pins: Pin[];\r\n    grids: Cartographic[][];\r\n    angles: number[];\r\n    lines: THREE.LineSegments[];\r\n\r\n    gridMesh: THREE.Group;\r\n    gridGenerateOffset: THREE.Vector3 = new THREE.Vector3();\r\n    _closeLine: THREE.LineSegments;\r\n\r\n    debug: { updated: boolean; };\r\n\r\n    enableMoveMarker: boolean;\r\n    activePin: Pin;\r\n\r\n    constructor(options: MissionOptions) {\r\n        super(options);\r\n\r\n        this.pins = [];\r\n\r\n        this.grids = [];\r\n\r\n        this.angles = [];\r\n\r\n        this.lines = [];\r\n\r\n        this.gridMesh = undefined;\r\n        this.gridGenerateOffset = new THREE.Vector3();\r\n\r\n        this._closeLine = undefined;\r\n        this.debug = {\r\n            updated: false,\r\n        };\r\n        this._map.addSubscribeObject(this);\r\n        /**\r\n         * Controller\r\n         */\r\n\r\n        this.enableMoveMarker = true;\r\n        this.activePin = undefined;\r\n    }\r\n\r\n    updateTarget(target: Cartesian) {\r\n        this.lines.forEach((line) => {\r\n            (line.geometry as Geometry).verticesNeedUpdate = true;\r\n        });\r\n        if (this._closeLine) {\r\n            (this._closeLine.geometry as Geometry).verticesNeedUpdate = true;\r\n        }\r\n        if (this.gridMesh) {\r\n            this.gridMesh.position.set(\r\n                this.gridGenerateOffset.x - target.x,\r\n                this.gridGenerateOffset.y - target.y,\r\n                this.gridGenerateOffset.z - target.z,\r\n            );\r\n        }\r\n    }\r\n\r\n    addPin(position?: Cartographic | Cartesian, height?: number) {\r\n        const index = this.pins.length;\r\n        const pin = new Pin({\r\n            index,\r\n            mission: (this as Mission),\r\n            position,\r\n        });\r\n        this.pins.push(pin);\r\n        if (this.pins.length > 1) {\r\n            const lineGeometry = new THREE.Geometry();\r\n            lineGeometry.vertices.push(this.pins[index - 1].head.position);\r\n            lineGeometry.vertices.push(this.pins[index].head.position);\r\n            const line = new THREE.LineSegments(\r\n                lineGeometry,\r\n                new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 3, transparent: true, opacity: 0.6 }),\r\n            );\r\n            this.lines.push(line);\r\n            this._map.scene.add(line);\r\n            if (!this._closeLine) {\r\n                const lineGeometry_ = new THREE.Geometry();\r\n                lineGeometry_.vertices.push(this.pins[index].head.position);\r\n                lineGeometry_.vertices.push(this.pins[0].head.position);\r\n                this._closeLine = new THREE.LineSegments(\r\n                    lineGeometry_,\r\n                    new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 3, transparent: true, opacity: 0.6 }),\r\n                );\r\n                this._map.scene.add(this._closeLine);\r\n            } else {\r\n                (this._closeLine.geometry as Geometry).vertices[0] = this.pins[index].head.position;\r\n                (this._closeLine.geometry as Geometry).verticesNeedUpdate = true;\r\n            }\r\n        }\r\n        if (MapSettings.debug) {\r\n            this.debug = { updated: true };\r\n        }\r\n        return pin;\r\n    }\r\n\r\n    updatePin(index: number) {\r\n        if (index > 0 && index - 1 < this.lines.length) {\r\n            (this.lines[index - 1].geometry as Geometry).verticesNeedUpdate = true;\r\n        }\r\n        if (index + 1 < this.pins.length) {\r\n            (this.lines[index].geometry as Geometry).verticesNeedUpdate = true;\r\n        }\r\n        if (this.pins.length > 1) {\r\n            if (index === 0) {\r\n                (this._closeLine.geometry as Geometry).verticesNeedUpdate = true;\r\n            } else if (index + 1 === this.pins.length) {\r\n                (this._closeLine.geometry as Geometry).verticesNeedUpdate = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    clearPins() {\r\n        // Clear all pins\r\n        this.pins.forEach((pin) => {\r\n            pin.dispose();\r\n        });\r\n        this.pins.length = 0;\r\n        for (let i_ = 0; i_ < this.lines.length; i_++) {\r\n            const line = this.lines[i_];\r\n            this._map.scene.remove(line);\r\n            line.geometry.dispose();\r\n            line.material.dispose();\r\n            this.lines[i_] = undefined;\r\n        }\r\n        this.lines.length = 0;\r\n        if (this._closeLine) {\r\n            this._map.scene.remove(this._closeLine);\r\n            this._closeLine.geometry.dispose();\r\n            this._closeLine.material.dispose();\r\n            this._closeLine = undefined;\r\n        }\r\n        this.grids = undefined;\r\n        if (this.gridMesh) {\r\n            this._map.scene.remove(this.gridMesh);\r\n            this.gridMesh = undefined;\r\n        }\r\n    }\r\n\r\n    interactableObjects() {\r\n        return this.pins.reduce((prev: THREE.Mesh[], pin) => {\r\n            prev.push(pin.head);\r\n            prev.push(pin.arrow);\r\n            return prev;\r\n        }, []);\r\n    }\r\n\r\n    onMouseDown(controls: OrbitControls, x: number, y: number, button: number) {\r\n        const now = Date.now();\r\n        let intersects;\r\n        panStart.set(x, y);\r\n        // Doubled click => Create new PIN\r\n        if (controls._lastClick && now - controls._lastClick < controls.constraint.maxClickTimeInterval &&\r\n            this.enableMoveMarker === true) {\r\n            MapUtility.rayCasterFromScreen(controls, x, y, picker);\r\n            intersects = picker.intersectObjects(this._map.quadTree.tiles.children);\r\n            if (!intersects.length) {\r\n                console.warn('Mouse down position have no intersect with any tiles.');\r\n                controls._lastClick = null;\r\n                return true;\r\n            } else if (intersects.length > 1) {\r\n                console.warn('Mouse down on more than one tile.');\r\n            }\r\n            const position = intersects[0].point.add(controls.camera.target);\r\n            this.activePin = this.addPin(position);\r\n            controls._state = Polygon.STATE.CHANGE_PIN_HEIGHT;\r\n            controls._lastClick = null;\r\n            return true;\r\n        }\r\n        MapUtility.rayCasterFromScreen(controls, x, y, picker);\r\n        intersects = picker.intersectObjects(this.interactableObjects());\r\n        if (intersects.length > 0) {\r\n            const obj = intersects[0].object;\r\n            if (obj.name === 'Head') {\r\n                this.activePin = obj.pin;\r\n                controls._state = Polygon.STATE.CHANGE_PIN_HEIGHT;\r\n            } else if (obj.name === 'Arrow') {\r\n                this.activePin = obj.pin;\r\n                controls._state = Polygon.STATE.CHANGE_PIN_POSITION;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onMouseMove(controls, x, y) {\r\n        if (controls._state === Polygon.STATE.CHANGE_PIN_HEIGHT) {\r\n            if (!this.enableMoveMarker) {\r\n                return false;\r\n            }\r\n            panEnd.set(x, y);\r\n            panDelta.subVectors(panEnd, panStart);\r\n            this.activePin.height += -panDelta.y * controls.camera.position.y / controls.canvas.height;\r\n            panStart.copy(panEnd);\r\n            return true;\r\n        } else if (controls._state === Polygon.STATE.CHANGE_PIN_POSITION) {\r\n            if (!this.enableMoveMarker) {\r\n                return false;\r\n            }\r\n            MapUtility.rayCasterFromScreen(controls, x, y, picker);\r\n            // TODO: Deprecated base plane\r\n            const markerPosition = picker.intersectObjects(this._map.quadTree.tiles.children)[0].point;\r\n            this.activePin.groundPosition = markerPosition.add(controls.camera.target);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    generateGrid(type: string, gridSpace?: number, angle?: number, speed?: number, minute?: number) {\r\n        const target = this._map.camera.target;\r\n        this.gridGenerateOffset.set(target.x, target.y, target.z);\r\n        // Call C++ function to genreate flight grid\r\n        if (type === 'opt') {\r\n            if (speed) {\r\n                optimizeGridCalculation.speed = speed;\r\n            }\r\n            if (minute) {\r\n                optimizeGridCalculation.minute = minute;\r\n            }\r\n            const res = optimizeGridCalculation.genGridInsideBound(this.pinsCoordinate,\r\n                this._map.vehicle.coordinate(), gridSpace);\r\n\r\n            this.grids = res.map((x) => {\r\n                return x.grid;\r\n            });\r\n            this.angles = res.map((x) => {\r\n                return x.angle;\r\n            });\r\n        } else {\r\n            if (speed) {\r\n                gridcalculation.speed = speed;\r\n            }\r\n            if (minute) {\r\n                gridcalculation.minute = minute;\r\n            }\r\n            this.grids = gridcalculation.genGridInsideBound(this.pinsCoordinate,\r\n                this._map.vehicle.coordinate(), gridSpace, angle || 0);\r\n        }\r\n        // Redraw grid mesh\r\n        // Remove exist mesh first\r\n        if (this.gridMesh) {\r\n            this.gridMesh.children.map((mesh) => {\r\n                (mesh as THREE.Mesh).geometry.dispose();\r\n                ((mesh as THREE.Mesh).material as Material).dispose();\r\n            });\r\n            this.gridMesh.children.length = 0;\r\n            this._map.scene.remove(this.gridMesh);\r\n        }\r\n        // Define grid mesh as an array of consecutive line\r\n        this.gridMesh = new THREE.Group();\r\n        this._map.scene.add(this.gridMesh);\r\n        // Create each grid from geneated data\r\n        this.grids.forEach((grid) => {\r\n            const lineGeometry = new THREE.Geometry();\r\n            for (let i = 0; i < grid.length; i++) {\r\n                // Passing Geocoordinate to 3D Point\r\n                sphericalMercator.CartographicToPixel(grid[i], px);\r\n                // Doubling point, so it's will render consecutive line\r\n                const v = px.clone().sub(this.gridGenerateOffset);\r\n                if (i !== 0) {\r\n                    lineGeometry.vertices.push(v);\r\n                }\r\n                lineGeometry.vertices.push(v);\r\n            }\r\n            this.gridMesh.add(new THREE.LineSegments(\r\n                lineGeometry,\r\n                new THREE.LineBasicMaterial({\r\n                    color: Math.random() * 0xffffff,\r\n                    linewidth: 3,\r\n                    transparent: true,\r\n                    opacity: 0.8,\r\n                }),\r\n                // new THREE.LineBasicMaterial({ color: 0x00e500, linewidth: 3, transparent: true, opacity: 0.8 })\r\n            ));\r\n        });\r\n        return this.grids;\r\n    }\r\n\r\n    get pinsCoordinate() {\r\n        return this.pins.map((pin) => {\r\n            return pin.coordinate();\r\n        });\r\n    }\r\n\r\n    coordinate() {\r\n        return QtPositioning.coordinate();\r\n    }\r\n    getScale() { return 1; }\r\n    setScale(scale) { return; }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Geometry, Material } from 'three';\r\nimport { Map3D } from '../Core/Map3D';\r\nimport { MapSettings } from '../Core/MapSettings';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { OrbitControls } from '../Renderer/OrbitControls';\r\nimport { MapUtility } from '../Utility/MapUtility';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { Mission, MissionOptions } from './Mission';\r\nimport { Pin } from './Pin';\r\n\r\nconst panStart = new THREE.Vector2();\r\nconst picker = new THREE.Raycaster();\r\n\r\nconst panEnd = new THREE.Vector2();\r\nconst panDelta = new THREE.Vector2();\r\n\r\nconst px = new THREE.Vector3();\r\n\r\nexport interface PolygonOptions extends MissionOptions {}\r\n\r\nexport class Polyline extends Mission {\r\n    static STATE = { CHANGE_PIN_HEIGHT: -2, CHANGE_PIN_POSITION: -3 };\r\n\r\n    _map: Map3D;\r\n    pins: Pin[];\r\n    angles: number[];\r\n    lines: THREE.LineSegments[];\r\n\r\n    debug: { updated: boolean; };\r\n\r\n    enableMoveMarker: boolean;\r\n    activePin: Pin;\r\n\r\n    constructor(options: MissionOptions) {\r\n        super(options);\r\n        /**\r\n         * Pin point that define polyline direction\r\n         * @type {Pin[]}\r\n         */\r\n        this.pins = [];\r\n        /**\r\n         * Three.Line\r\n         * @type {THREE.LineSegments}\r\n         */\r\n        this.lines = [];\r\n        this.debug = {\r\n            updated: false,\r\n        };\r\n        this._map.addSubscribeObject(this);\r\n        /**\r\n         * Controller\r\n         */\r\n        /**\r\n         * Set to false to disable marker modifiered\r\n         * @type {bool}\r\n         */\r\n        this.enableMoveMarker = true;\r\n        this.activePin = undefined;\r\n    }\r\n\r\n    updateTarget(target: Cartesian) {\r\n        this.lines.forEach((line) => {\r\n            (line.geometry as Geometry).verticesNeedUpdate = true;\r\n        });\r\n    }\r\n\r\n    addPin(position?: Cartographic | Cartesian, height?: number) {\r\n        const index = this.pins.length;\r\n        const pin = new Pin({\r\n            index,\r\n            mission: (this as Mission),\r\n            position,\r\n        });\r\n        this.pins.push(pin);\r\n        if (this.pins.length > 1) {\r\n            const lineGeometry = new THREE.Geometry();\r\n            lineGeometry.vertices.push(this.pins[index - 1].head.position);\r\n            lineGeometry.vertices.push(this.pins[index].head.position);\r\n            const line = new THREE.LineSegments(\r\n                lineGeometry,\r\n                new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 3, transparent: true, opacity: 0.6 }),\r\n            );\r\n            this.lines.push(line);\r\n            this._map.scene.add(line);\r\n        }\r\n        if (MapSettings.debug) {\r\n            this.debug = { updated: true };\r\n        }\r\n        return pin;\r\n    }\r\n\r\n    updatePin(index: number) {\r\n        if (index > 0 && index - 1 < this.lines.length) {\r\n            (this.lines[index - 1].geometry as Geometry).verticesNeedUpdate = true;\r\n        }\r\n        if (index + 1 < this.pins.length) {\r\n            (this.lines[index].geometry as Geometry).verticesNeedUpdate = true;\r\n        }\r\n    }\r\n\r\n    clearPins() {\r\n        // Clear all pins\r\n        this.pins.forEach((pin) => pin.dispose());\r\n        this.pins.length = 0;\r\n        for (let i_ = 0; i_ < this.lines.length; i_++) {\r\n            const line = this.lines[i_];\r\n            this._map.scene.remove(line);\r\n            line.geometry.dispose();\r\n            line.material.dispose();\r\n            this.lines[i_] = undefined;\r\n        }\r\n        this.lines.length = 0;\r\n    }\r\n\r\n    interactableObjects() {\r\n        return this.pins.reduce((prev: THREE.Mesh[], pin) => {\r\n            prev.push(pin.head);\r\n            prev.push(pin.arrow);\r\n            return prev;\r\n        }, []);\r\n    }\r\n\r\n    onMouseDown(controls: OrbitControls, x: number, y: number, button: number) {\r\n        const now = Date.now();\r\n        let intersects;\r\n        panStart.set(x, y);\r\n        // Doubled click => Create new PIN\r\n        if (controls._lastClick && now - controls._lastClick < controls.constraint.maxClickTimeInterval &&\r\n            this.enableMoveMarker === true) {\r\n            MapUtility.rayCasterFromScreen(controls, x, y, picker);\r\n            intersects = picker.intersectObjects(this._map.quadTree.tiles.children);\r\n            if (!intersects.length) {\r\n                console.warn('Mouse down position have no intersect with any tiles.');\r\n                controls._lastClick = null;\r\n                return true;\r\n            } else if (intersects.length > 1) {\r\n                console.warn('Mouse down on more than one tile.');\r\n            }\r\n            const position = intersects[0].point.add(controls.camera.target);\r\n            this.activePin = this.addPin(position);\r\n            controls._state = Polyline.STATE.CHANGE_PIN_HEIGHT;\r\n            controls._lastClick = null;\r\n            return true;\r\n        }\r\n        MapUtility.rayCasterFromScreen(controls, x, y, picker);\r\n        intersects = picker.intersectObjects(this.interactableObjects());\r\n        if (intersects.length > 0) {\r\n            const obj = intersects[0].object;\r\n            if (obj.name === 'Head') {\r\n                this.activePin = obj.pin;\r\n                controls._state = Polyline.STATE.CHANGE_PIN_HEIGHT;\r\n            } else if (obj.name === 'Arrow') {\r\n                this.activePin = obj.pin;\r\n                controls._state = Polyline.STATE.CHANGE_PIN_POSITION;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onMouseMove(controls, x, y) {\r\n        if (controls._state === Polyline.STATE.CHANGE_PIN_HEIGHT) {\r\n            if (!this.enableMoveMarker) {\r\n                return false;\r\n            }\r\n            panEnd.set(x, y);\r\n            panDelta.subVectors(panEnd, panStart);\r\n            this.activePin.height += -panDelta.y * controls.camera.position.y / controls.canvas.height;\r\n            panStart.copy(panEnd);\r\n            return true;\r\n        } else if (controls._state === Polyline.STATE.CHANGE_PIN_POSITION) {\r\n            if (!this.enableMoveMarker) {\r\n                return false;\r\n            }\r\n            MapUtility.rayCasterFromScreen(controls, x, y, picker);\r\n            // TODO: Deprecated base plane\r\n            const markerPosition = picker.intersectObjects(this._map.quadTree.tiles.children)[0].point;\r\n            this.activePin.groundPosition = markerPosition.add(controls.camera.target);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    get pinsCoordinate() {\r\n        return this.pins.map((pin) => pin.coordinate());\r\n    }\r\n\r\n    coordinate() {\r\n        return QtPositioning.coordinate();\r\n    }\r\n    getScale() { return 1; }\r\n    setScale(scale) { return; }\r\n}\r\n","import * as THREE from 'three';\nimport { MapSettings } from '../Core/MapSettings';\nimport { TextureLoader } from 'three';\n\nexport class Skybox extends THREE.Mesh {\n    constructor() {\n        const skyboxTexture = new THREE.CubeTexture([]);\n        skyboxTexture.format = THREE.RGBFormat;\n\n        // const loader = new THREE.ImageLoader();\n        const textures = [\n            new TextureLoader().load('../skybox/skybox_nx.jpg'),\n            new TextureLoader().load('../skybox/skybox_ny.jpg'),\n            new TextureLoader().load('../skybox/skybox_nz.jpg'),\n            new TextureLoader().load('../skybox/skybox_px.jpg'),\n            new TextureLoader().load('../skybox/skybox_py.jpg'),\n            new TextureLoader().load('../skybox/skybox_pz.jpg'),\n        ];\n        // loader.load('./2.png', (image) => {\n        //     const getSide = (x, y) => {\n        //         const size = 1024;\n\n        //         const canvas = document.createElement('canvas');\n        //         canvas.width = size;\n        //         canvas.height = size;\n\n        //         const context = canvas.getContext('2d');\n        //         context.drawImage(image, - x * size, - y * size);\n\n        //         return new THREE.Texture(canvas);\n        //     };\n\n        //     skyboxTexture.images[ 0 ] = getSide( 2, 1 ); // px\n        //     skyboxTexture.images[ 1 ] = getSide( 0, 1 ); // nx\n        //     skyboxTexture.images[ 2 ] = getSide( 1, 0 ); // py\n        //     skyboxTexture.images[ 3 ] = getSide( 1, 2 ); // ny\n        //     skyboxTexture.images[ 4 ] = getSide( 1, 1 ); // pz\n        //     skyboxTexture.images[ 5 ] = getSide( 3, 1 ); // nz\n        //     skyboxTexture.needsUpdate = true;\n        // });\n        const materialArray = [];\n        for (let i = 0; i < 6; i++) {\n            materialArray.push( new THREE.MeshBasicMaterial({\n                color: 0x000000,\n                // map: textures[0],\n                // wireframe: true,\n                side: THREE.DoubleSide,\n            }));\n        }\n        const skyMaterial = new THREE.MeshFaceMaterial( materialArray );\n        // const shader = THREE.ShaderLib.cube;\n        // const uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        // uniforms.tCube.texture = skyboxTexture;   // textureCube has been init before\n        // const material_ = new THREE.ShaderMaterial({\n        //     fragmentShader: shader.fragmentShader,\n        //     vertexShader: shader.vertexShader,\n        //     uniforms,\n        // });\n\n        super(\n            new THREE.CubeGeometry(\n                MapSettings.basePlaneDimension,\n                MapSettings.basePlaneDimension,\n                MapSettings.basePlaneDimension,\n                1, 1, 1,\n            ),\n            skyMaterial,\n        );\n\n        this.position.y = MapSettings.basePlaneDimension / 2 - 100;\n    }\n}\n","import * as THREE from 'three';\r\nimport { Map3D } from '../Core/Map3D';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { MapUtility } from '../Utility/MapUtility';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { RenderingObject } from './RenderingObject';\r\n\r\nexport interface VehicleOptions {\r\n    map: Map3D;\r\n    position?: Cartographic | Cartesian;\r\n}\r\n\r\nexport interface Head extends THREE.Mesh {\r\n    geometry: THREE.Geometry;\r\n    material: THREE.Material;\r\n}\r\n\r\nexport class Vehicle extends RenderingObject {\r\n    _map: Map3D;\r\n\r\n    head: Head;\r\n    line: THREE.LineSegments;\r\n\r\n    group: THREE.Group;\r\n\r\n    _headAngle: number;\r\n    _rGPosition: THREE.Vector3;\r\n    _rPosition: THREE.Vector3;\r\n    _position: THREE.Vector3;\r\n    _coordinate: Cartographic;\r\n\r\n    lastScale: number;\r\n\r\n    constructor(options: VehicleOptions) {\r\n        super();\r\n\r\n        this._map = options.map;\r\n\r\n        const headGeometry = new THREE.Geometry();\r\n        const radius = 7.5;\r\n        const x = radius * 2.0 / 3.0;\r\n        const offset = 0; // radius / 3.0;\r\n        headGeometry.vertices = [\r\n            new THREE.Vector3(0.0, 0.0, 0.0 + offset),\r\n            new THREE.Vector3(-x * Math.sqrt(3), x, x + offset),\r\n            new THREE.Vector3(x * Math.sqrt(3), x, x + offset),\r\n            new THREE.Vector3(0.0, x * 2.0 / 3.0, 0.0 + offset),\r\n            new THREE.Vector3(0.0, 0.0, -2 * x + offset),\r\n        ];\r\n        headGeometry.faces = [\r\n            new THREE.Face3(0, 2, 3),\r\n            new THREE.Face3(0, 3, 1),\r\n            new THREE.Face3(0, 4, 2),\r\n            new THREE.Face3(0, 1, 4),\r\n            new THREE.Face3(3, 4, 1),\r\n            new THREE.Face3(3, 2, 4),\r\n        ];\r\n        headGeometry.computeFaceNormals();\r\n        headGeometry.rotateX(10 / 180 * Math.PI);\r\n        /**\r\n         * Pin's head mesh\r\n         * @type {THREE.Mesh}\r\n         */\r\n        this.head = (new THREE.Mesh(\r\n            headGeometry,\r\n            new THREE.MeshBasicMaterial({ color: 0x3366ff, opacity: 0.8, transparent: true }),\r\n        ) as Head);\r\n        this.head.name = 'Head';\r\n        /**\r\n         * Line between head and arrow geometry\r\n         * @type {THREE.Geometry}\r\n         */\r\n        const lineGeometry = new THREE.Geometry();\r\n        lineGeometry.vertices.push(new THREE.Vector3());\r\n        lineGeometry.vertices.push(this.head.position);\r\n        /**\r\n         * ine between head and arrow\r\n         * @type {THREE.LineSegments}\r\n         */\r\n        this.line = new THREE.LineSegments(\r\n            lineGeometry,\r\n            new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 3, transparent: true, opacity: 0.8 }),\r\n        );\r\n        this.line.name = 'Line';\r\n        /**\r\n         * Pack of all mesh in pin (head, line, arrow)\r\n         * @type {THREE.Group}\r\n         */\r\n        this.group = new THREE.Group();\r\n        this.group.add(this.head);\r\n        this.group.add(this.line);\r\n        this.group.name = 'Vehicle';\r\n        options.map.scene.add(this.group);\r\n        // var box = new THREE.BoxHelper(this.group, 0xffff00);\r\n        // options.map.scene.add(box);\r\n        /**\r\n         * Rendered Point at Ground\r\n         * @type {THREE.Vector3}\r\n         * @private\r\n         */\r\n        this._rGPosition = (this.line.geometry as THREE.Geometry).vertices[0];\r\n        /**\r\n         * Rendered Point\r\n         * @type {THREE.Vector3}\r\n         * @private\r\n         */\r\n        this._rPosition = this.head.position;\r\n        // TODO: Can it be Carsetian\r\n        /**\r\n         * Position\r\n         * @type {THREE.Vector3}\r\n         * @private\r\n         */\r\n        this._position = new THREE.Vector3();\r\n        this._coordinate = QtPositioning.coordinate();\r\n        /**\r\n         * Head angle from North (0, -1, 0)\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._headAngle = 0.0;\r\n        // Initialize pin position\r\n        if (options.position) {\r\n            this.position = options.position;\r\n        }\r\n        /**\r\n         * Scale\r\n         * @type {number}\r\n         */\r\n        this.lastScale = 1.0;\r\n        // Add Target Subscribe to this object\r\n        options.map.addSubscribeObject(this);\r\n    }\r\n    /**\r\n     * Free memory and remove vehicle from rendering\r\n     */\r\n    dispose() {\r\n        // https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js#L397\r\n        this.group.remove(this.head);\r\n        this.group.remove(this.line);\r\n        this._map.removeSubscribeObject(this);\r\n        this._map.scene.remove(this.group);\r\n        this._map = undefined;\r\n        this.group = undefined;\r\n        this.head.geometry.dispose();\r\n        this.head.material.dispose();\r\n        this.head = undefined;\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.line = undefined;\r\n        this._rGPosition = undefined;\r\n        this._rPosition = undefined;\r\n        this._position = undefined;\r\n    }\r\n    updateTarget(target) {\r\n        // Update rendering position\r\n        this._rPosition.subVectors(this._position, target);\r\n        // TODO: elevation projection instead of 0\r\n        this._rGPosition.set(this._rPosition.x, 0, this._rPosition.z);\r\n        (this.line.geometry as THREE.Geometry).verticesNeedUpdate = true;\r\n    }\r\n\r\n    get position() { return this._position; }\r\n    set position(p: any) {\r\n        if (!p) {\r\n            this._position.y = MapUtility.tenMeters();\r\n        } else {\r\n            // Case position is a QtPositioning.coordiante\r\n            if (p.longitude) {\r\n                sphericalMercator.CartographicToPixel(p, this._position);\r\n            } else {\r\n                this._position.copy(p);\r\n                // Default height is 10 meters\r\n                this._position.y = this._position.y || MapUtility.tenMeters();\r\n            }\r\n        }\r\n\r\n        // Restrict position above ground only\r\n        this._position.y = Math.max(this._position.y, 0);\r\n\r\n        // Update rendering position\r\n        // TODO: Is this._map needs\r\n        this._rPosition.subVectors(this._position, (this._map.camera.target as any));\r\n        // TODO: elevation projection instead of 0\r\n        this._rGPosition.set(this._rPosition.x, 0, this._rPosition.z);\r\n\r\n        (this.line.geometry as THREE.Geometry).verticesNeedUpdate = true;\r\n\r\n        this._map.cameraController.update();\r\n    }\r\n\r\n    coordinate() {\r\n        sphericalMercator.PixelToCartographic(this._position, this._coordinate);\r\n        return this._coordinate;\r\n    }\r\n\r\n    get height() { return this._position.y; }\r\n    set height(h) {\r\n        this._position.y = h;\r\n    }\r\n\r\n    get headAngle() {\r\n        return -this._headAngle * 180 / Math.PI;\r\n    }\r\n    set headAngle(angle) {\r\n        const angle_ = -angle * Math.PI / 180;\r\n        this.head.geometry.rotateY(angle_ - this._headAngle);\r\n        this._headAngle = angle_;\r\n    }\r\n\r\n    getScale() { return this.lastScale; }\r\n    setScale(s: number) {\r\n        if (this.lastScale === s) {\r\n            return;\r\n        }\r\n\r\n        this.head.geometry.scale(s / this.lastScale, s / this.lastScale, s / this.lastScale);\r\n        this.lastScale = s;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Map3D } from '../Core/Map3D';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\n\r\nconst t = new Cartesian();\r\nconst s = new THREE.Vector3();\r\nconst corner = [[-1, -1], [-1, 1], [1, 1], [1, -1]];\r\n\r\nexport class Camera extends THREE.PerspectiveCamera {\r\n    _map: Map3D;\r\n\r\n    target = new Cartesian();\r\n    _targetCartographic = QtPositioning.coordinate();\r\n\r\n    _positionCartographic = QtPositioning.coordinate();\r\n\r\n    _culledGroundPlane: Cartesian[];\r\n\r\n    updatedLastFrame: boolean;\r\n    // FIXME: Debug\r\n    // geometry: THREE.Geometry;\r\n\r\n    constructor(options) {\r\n        super(70, options.canvas.width / options.canvas.height, 1 / 99, 12000000 / Math.sin(70 * Math.PI));\r\n\r\n        this._map = options.map;\r\n\r\n        this._targetCartographic = QtPositioning.coordinate();\r\n\r\n        this._positionCartographic = QtPositioning.coordinate();\r\n        this._culledGroundPlane = [new Cartesian(), new Cartesian(), new Cartesian(), new Cartesian()];\r\n        this.updatedLastFrame = false;\r\n        /**\r\n         * FIXME:\r\n         * Debuging mesh\r\n         */\r\n        // const material = new THREE.MeshBasicMaterial({\r\n        //     wireframe: true,\r\n        //     // opacity: 0,\r\n        //     color: new THREE.Color(0xff0000),\r\n        // });\r\n        // this.geometry = new THREE.Geometry();\r\n        // this.geometry.vertices = [\r\n        //     new THREE.Vector3(),\r\n        //     new THREE.Vector3(),\r\n        //     new THREE.Vector3(),\r\n        //     new THREE.Vector3(),\r\n        // ];\r\n        // this.geometry.faces = [\r\n        //     new THREE.Face3(0, 1, 3),\r\n        //     new THREE.Face3(1, 3, 2),\r\n        // ];\r\n        // this.geometry.computeFaceNormals();\r\n        // const mesh = new THREE.Mesh(this.geometry, material);\r\n        // this._map.scene.add(mesh);\r\n    }\r\n    setPosition(position) {\r\n        if (!position) {\r\n            throw new Error('No position provided');\r\n        }\r\n        // Partial set x, y, z of position\r\n        this.position.x = position.x || this.position.x;\r\n        this.position.y = position.y || this.position.y;\r\n        this.position.z = position.z || this.position.z;\r\n        sphericalMercator.PixelToCartographic(this.position, this._positionCartographic);\r\n        this.updatedLastFrame = true;\r\n    }\r\n    update() {\r\n        // Update Cartographic position\r\n        sphericalMercator.CartesianToCartographic(this.target, this._targetCartographic);\r\n        t.addVectors((this.target as any), this.position);\r\n        sphericalMercator.CartesianToCartographic(t, this._positionCartographic);\r\n        this.updatedLastFrame = true;\r\n        // Calculate ray direction at 4 corners of screen\r\n        let scale;\r\n        for (let i = 0; i < 4; i++) {\r\n            t.set(corner[i][0], corner[i][1], 0.5).unproject(this).sub(this.position).normalize();\r\n            // Case corner of camrea to over horizontal line direction from camera y axis will be positive\r\n            // It will not be able to project plane so will clip with -0\r\n            if (t.y >= 0) {\r\n                t.y = -0.00001;\r\n            }\r\n            scale = this.position.y / t.y;\r\n            s.subVectors(this.position, t.multiplyScalar(scale));\r\n            this._culledGroundPlane[i].set(s.x + this.target.x, 0, s.z + this.target.z);\r\n            // FIXME: Debugging\r\n            // this.geometry.vertices[i].set(s.x, 0, s.z);\r\n        }\r\n        // FIXME: Debugging\r\n        // this.geometry.verticesNeedUpdate = true;\r\n    }\r\n\r\n    get positionCartographic() {\r\n        return this._positionCartographic;\r\n    }\r\n\r\n    get targetCartographic() {\r\n        return this._targetCartographic;\r\n    }\r\n\r\n    get culledGroundPlane() {\r\n        return this._culledGroundPlane;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Map3D } from '../Core/Map3D';\r\nimport { MapSettings } from '../Core/MapSettings';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { Camera } from './Camera';\r\n\r\nconst zero = new THREE.Vector3();\r\n// so camera.up is the orbit axis\r\nlet quat = new THREE.Quaternion();\r\nlet quatInverse = new THREE.Quaternion();\r\nconst EPS = 0.000001;\r\nconst v = new THREE.Vector3();\r\n\r\nexport class OrbitConstraint {\r\n    map: Map3D;\r\n    camera: Camera;\r\n    targetDistance: number;\r\n\r\n    minDistance: number;\r\n    maxDistance: number;\r\n\r\n    minPolarAngle: number = 0.0;\r\n    // maxPolarAngle: number = 0.48 * Math.PI;\r\n    maxPolarAngle: number = 0.3 * Math.PI;\r\n\r\n    minAzimuthAngle: number = -Infinity;\r\n    maxAzimuthAngle: number = Infinity;\r\n\r\n    enableDamping: boolean = true;\r\n    dampingFactor: number = 0.75;\r\n    maxClickTimeInterval: number = 500;\r\n\r\n    theta: number = 0.0;\r\n    phi: number = 0.0;\r\n    thetaDelta: number = 0.0;\r\n    phiDelta: number = 0.0;\r\n\r\n    scale: number = 1.0;\r\n\r\n    panOffset: THREE.Vector3 = new THREE.Vector3();\r\n    zoomChanged: boolean = false;\r\n\r\n    lastPosition: THREE.Vector3 = new THREE.Vector3();\r\n    lastQuaternion: THREE.Quaternion = new THREE.Quaternion();\r\n\r\n    constructor(map: Map3D, camera: Camera, targetDistance: number) {\r\n        this.map = map;\r\n        /**\r\n         * @type Camera\r\n         */\r\n        this.camera = camera;\r\n        /**\r\n         * @type number\r\n         */\r\n        this.targetDistance = targetDistance;\r\n\r\n        // Limits to how far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = MapSettings.maxCameraDistance;\r\n\r\n        quat = quat.setFromUnitVectors(this.camera.up, new THREE.Vector3(0, 1, 0));\r\n        quatInverse = quat.clone().inverse();\r\n    }\r\n\r\n    getPolarAngle() {\r\n        return this.phi;\r\n    }\r\n\r\n    getAzimuthalAngle() {\r\n        return this.theta;\r\n    }\r\n    rotateLeft(angle) {\r\n        this.thetaDelta -= angle;\r\n        // TODO:\r\n        // compass.update();\r\n    }\r\n    rotateUp(angle) {\r\n        this.phiDelta -= angle;\r\n        // TODO:\r\n        // compass.update();\r\n    }\r\n\r\n    panLeft(distance) {\r\n        const te = this.camera.matrix.elements;\r\n        // get X column of matrix\r\n        v.set(te[0], te[1], te[2]);\r\n        v.multiplyScalar(-distance);\r\n        this.panOffset.add(v);\r\n    }\r\n    // pass in distance in world space to move up\r\n    panUp(distance) {\r\n        const te = this.camera.matrix.elements;\r\n        // get Y column of matrix\r\n        v.set(te[4], /* te[ 5 ] */ 0, te[6]);\r\n        v.multiplyScalar(distance);\r\n        this.panOffset.add(v);\r\n    }\r\n    // pass in x,y of change desired in pixel space,\r\n    // right and down are positive\r\n    pan(deltaX, deltaY, screenWidth, screenHeight) {\r\n        // half of the fov is center to top of screen\r\n        const t = this.targetDistance * Math.tan((this.camera.fov / 2) * Math.PI / 180.0);\r\n        // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n        this.panLeft(2 * deltaX * t / screenHeight);\r\n        this.panUp(2 * deltaY * t / screenHeight);\r\n    }\r\n\r\n    dollyIn(dollyScale) {\r\n        this.scale /= dollyScale;\r\n    }\r\n    dollyOut(dollyScale) {\r\n        this.scale *= dollyScale;\r\n    }\r\n\r\n    /**\r\n     * Update camera constrain\r\n     * @returns {boolean}\r\n     */\r\n    update() {\r\n        const offset = this.camera.position;\r\n        const target = this.camera.target;\r\n\r\n        this.theta += this.thetaDelta;\r\n        this.phi += this.phiDelta;\r\n        this.targetDistance = this.targetDistance * this.scale;\r\n        // Restrict theta to be between desired limits\r\n        this.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this.theta));\r\n        // Restrict phi to be between desired limits\r\n        this.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this.phi));\r\n        // Restrict phi to be betwee EPS and PI-EPS\r\n        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\r\n        // Restrict radius to be between desired limits\r\n        this.targetDistance = Math.max(this.minDistance, Math.min(this.maxDistance, this.targetDistance));\r\n\r\n        // Move target to panned location\r\n        target.add(this.panOffset);\r\n        offset.x = this.targetDistance * Math.sin(this.phi) * Math.sin(this.theta);\r\n        offset.y = this.targetDistance * Math.cos(this.phi);\r\n        offset.z = this.targetDistance * Math.sin(this.phi) * Math.cos(this.theta);\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n        this.camera.lookAt(zero);\r\n        // Update camera matrix\r\n        this.camera.updateMatrix();\r\n        this.camera.updateMatrixWorld(true);\r\n        this.camera.matrixWorldInverse.getInverse(this.camera.matrixWorld);\r\n        this.camera.update();\r\n        // Update subscribe object\r\n        this.map._subscribeObjects.forEach((obj) => { obj.updateTarget(target); });\r\n        if (this.enableDamping === true) {\r\n            this.thetaDelta *= (1.0 - this.dampingFactor);\r\n            this.phiDelta *= (1.0 - this.dampingFactor);\r\n        } else {\r\n            this.thetaDelta = 0.0;\r\n            this.phiDelta = 0.0;\r\n        }\r\n        this.scale = 1.0;\r\n        this.panOffset.set(0, 0, 0);\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n        const t = new THREE.Vector3();\r\n        if (this.lastPosition.distanceToSquared(t.addVectors(this.camera.position,\r\n            (this.camera.target as any))) > EPS ||\r\n            8 * (1 - this.lastQuaternion.dot(this.camera.quaternion)) > EPS ||\r\n            this.zoomChanged) {\r\n            this.lastPosition.copy(t);\r\n            this.lastQuaternion.copy(this.camera.quaternion);\r\n            this.zoomChanged = false;\r\n            if (this.map.quadTree) {\r\n                this.map.quadTree.needUpdate = true;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    get target() {\r\n        return this.camera.target;\r\n    }\r\n    set target(target) {\r\n        this.camera.target = target;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Map3D } from '../Core/Map3D';\r\nimport { MapSettings } from '../Core/MapSettings';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { Camera } from '../Renderer/Camera';\r\nimport { MapUtility } from '../Utility/MapUtility';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { OrbitConstraint } from './OrbitConstraint';\r\n\r\nexport interface OrbitControlsOptions {\r\n    map: Map3D;\r\n    eventSource: QtEventSource;\r\n    canvas: QtCanvas;\r\n}\r\n\r\nfunction compare(modifiers) {\r\n    if (typeof Qt === 'object') {\r\n        return modifiers & Qt.ControlModifier;\r\n    }\r\n\r\n    return modifiers;\r\n}\r\n\r\nfunction getAutoRotationAngle(primitive: OrbitControls) {\r\n    return 2 * Math.PI / 60 / 60 * primitive.autoRotateSpeed;\r\n}\r\n\r\nfunction getZoomScale(delta?: number) {\r\n    delta = delta || 1;\r\n    return Math.pow(0.999, delta);\r\n}\r\n\r\nconst screenPosition = new THREE.Vector2();\r\nconst picker = new THREE.Raycaster();\r\nconst px = new THREE.Vector3();\r\n\r\nfunction pickerFromScreen(primitive, x, y, p) {\r\n    screenPosition.set((x / primitive.canvas.width) * 2 - 1, -(y / primitive.canvas.height) * 2 + 1);\r\n    p.setFromCamera(screenPosition, primitive.camera);\r\n\r\n    return p;\r\n}\r\n\r\nfunction contextmenu(event) {\r\n    event.preventDefault();\r\n}\r\n\r\nexport class OrbitControls extends THREE.EventDispatcher {\r\n    static STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };\r\n    static MODE = { NONE: -1, GUIDE: 0 };\r\n\r\n    _map: Map3D;\r\n\r\n    constraint: OrbitConstraint;\r\n    eventSource: QtEventSource;\r\n    canvas: QtCanvas;\r\n\r\n    enabled: boolean;\r\n\r\n    enableZoom: boolean;\r\n    zoomSpeed: number;\r\n\r\n    enableRotate: boolean;\r\n    rotateSpeed: number;\r\n\r\n    enablePan: boolean;\r\n    keyPanSpeed: number;\r\n\r\n    autoRotate: boolean;\r\n    autoRotateSpeed: number;\r\n\r\n    enableKeys: boolean;\r\n    keys: { LEFT: any; UP: number; RIGHT: number; BOTTOM: number; };\r\n    mouseButtons: { ORBIT: number; ZOOM: number; PAN: number; };\r\n\r\n    _state: number;\r\n    _lastClick: number;\r\n\r\n    _isMouseDown: boolean;\r\n\r\n    _mode: number;\r\n\r\n    keyDown: any;\r\n\r\n    zoom0: number;\r\n    position0: THREE.Vector3;\r\n    target0: Cartesian;\r\n\r\n    dispose: () => void;\r\n\r\n    constructor(options: OrbitControlsOptions) {\r\n        super();\r\n\r\n        this._map = options.map;\r\n\r\n        this.constraint = new OrbitConstraint(this._map, this._map.camera, MapSettings.cameraDistance);\r\n        this.eventSource = options.eventSource;\r\n        this.canvas = options.canvas;\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n        // This option actually enables dollying in and out; left as \"zoom\" for\r\n        // backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 10;\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.keyPanSpeed = 5.0; // pixels moved per arrow key push\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n        // Set to false to disable use of the keys\r\n        this.enableKeys = true;\r\n        // The four arrow keys\r\n        this.keys = typeof Qt === 'object'\r\n            ? { LEFT: Qt.LeftArrow, UP: Qt.UpArrow, RIGHT: Qt.RightArrow, BOTTOM: Qt.DownArrow }\r\n            : { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\r\n        // Mouse buttons\r\n        this.mouseButtons = { ORBIT: THREE.MOUSE.RIGHT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.LEFT };\r\n        /// /////////\r\n        // internals\r\n        const scope = this;\r\n        const rotateStart = new THREE.Vector2();\r\n        const rotateEnd = new THREE.Vector2();\r\n        const rotateDelta = new THREE.Vector2();\r\n        const panStart = new THREE.Vector2();\r\n        const panEnd = new THREE.Vector2();\r\n        const panDelta = new THREE.Vector2();\r\n        const dollyStart = new THREE.Vector2();\r\n        const dollyEnd = new THREE.Vector2();\r\n        const dollyDelta = new THREE.Vector2();\r\n        /**\r\n         * State\r\n         */\r\n        this._state = OrbitControls.STATE.NONE;\r\n        this._lastClick = null;\r\n        /**\r\n         * Is mouse down\r\n         * @type {boolean}\r\n         */\r\n        this._isMouseDown = false;\r\n        this._mode = OrbitControls.MODE.NONE;\r\n\r\n        const currentPin = null;\r\n        let intersected = null;\r\n        // set start position\r\n        // TODO: using property instead of location\r\n        // setView(this, location.hash)\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.camera.position.clone();\r\n        this.zoom0 = this.camera.zoom;\r\n\r\n        // pass in x,y of change desired in pixel space,\r\n        // right and down are positive\r\n        const pan = (deltaX, deltaY) => {\r\n            scope.constraint.pan(deltaX, deltaY, scope.canvas.width, scope.canvas.height);\r\n        };\r\n\r\n        // this.moveTo = function (coords, currentHeight) {\r\n        //     this.target.copy(coords);\r\n        //     this.camera.position.copy({x: coords.x, y: currentHeight, z: coords.z});\r\n        //     // TIMER: timer.\r\n        //     if (typeof Qt === 'object') {\r\n        //         timer.setTimeout(function () { map.quadTree.needUpdate = true; }, 10);\r\n        //     } else {\r\n        //         setTimeout(function () { map.quadTree.needUpdate = true; }, 10);\r\n        //     }\r\n        // };\r\n\r\n        function onMouseDown(x, y, button, modifiers) {\r\n            if (scope.enabled === false) {\r\n                return;\r\n            }\r\n            if (button === scope.mouseButtons.ORBIT || compare(modifiers)) {\r\n                if (scope.enableRotate === false) {\r\n                    return;\r\n                }\r\n                scope._state = OrbitControls.STATE.ROTATE;\r\n                rotateStart.set(x, y);\r\n            } else if (button === scope.mouseButtons.ZOOM) {\r\n                if (scope.enableZoom === false) {\r\n                    return;\r\n                }\r\n                scope._state = OrbitControls.STATE.DOLLY;\r\n                dollyStart.set(x, y);\r\n            } else if (button === scope.mouseButtons.PAN) {\r\n                // Checking mouse down on marker\r\n                // TODO: Use mission method to handle object\r\n                if (!scope._map.currentMission.onMouseDown(scope, x, y, button)) {\r\n                    panStart.set(x, y);\r\n                    scope._lastClick = Date.now();\r\n                }\r\n            }\r\n            scope._isMouseDown = true;\r\n        }\r\n        function onWebMouseDown(event) {\r\n            event.preventDefault();\r\n            onMouseDown(event.clientX, event.clientY, event.button, event.ctrlKey);\r\n        }\r\n\r\n        function onMouseMove(x, y) {\r\n            if (scope.enabled === false) {\r\n                return;\r\n            }\r\n            const now = Date.now();\r\n            if (scope._lastClick) {\r\n                panEnd.set(x, y);\r\n                panDelta.subVectors(panEnd, panStart);\r\n                if (scope._isMouseDown && now - scope._lastClick <= 500 &&\r\n                    Math.abs(panDelta.x) + Math.abs(panDelta.y) > 10 && scope.enablePan) {\r\n                    if (scope._mode === OrbitControls.MODE.GUIDE) {\r\n                        scope.target0.set(scope.target.x, 0, scope.target.z);\r\n                        scope.constraint.target = scope.target0;\r\n                        scope._mode = OrbitControls.MODE.NONE;\r\n                    }\r\n                    scope._state = OrbitControls.STATE.PAN;\r\n                    scope._lastClick = null;\r\n                } else if (now - scope._lastClick > 500) {\r\n                    scope._lastClick = null;\r\n                }\r\n            }\r\n            if (scope._state === OrbitControls.STATE.NONE) {\r\n                // Hovering Rendering Object\r\n                MapUtility.rayCasterFromScreen(scope, x, y, picker);\r\n                const intersects = picker.intersectObjects(scope._map.currentMission.interactableObjects(), true);\r\n                if (intersects.length > 0) {\r\n                    const targetObject = intersects[0].object;\r\n                    if (targetObject !== intersected) {\r\n                        if (intersected) {\r\n                            intersected.material.opacity = intersected.currentOpacity;\r\n                        }\r\n                        intersected = targetObject;\r\n                        intersected.currentOpacity = intersected.material.opacity;\r\n                        intersected.material.opacity = 1.0;\r\n                    }\r\n                } else if (intersected) {\r\n                    intersected.material.opacity = intersected.currentOpacity;\r\n                    delete intersected.currentOpacity;\r\n                    intersected = null;\r\n                }\r\n            } else if (scope._state === OrbitControls.STATE.ROTATE) {\r\n                if (scope.enableRotate === false) {\r\n                    return;\r\n                }\r\n                rotateEnd.set(x, y);\r\n                rotateDelta.subVectors(rotateEnd, rotateStart);\r\n                // rotating across whole screen goes 360 degrees around\r\n                scope.constraint.rotateLeft(2 * Math.PI * rotateDelta.x / scope.canvas.width * scope.rotateSpeed);\r\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n                scope.constraint.rotateUp(2 * Math.PI * rotateDelta.y / scope.canvas.height * scope.rotateSpeed);\r\n                rotateStart.copy(rotateEnd);\r\n            } else if (scope._state === OrbitControls.STATE.DOLLY) {\r\n                if (scope.enableZoom === false) {\r\n                    return;\r\n                }\r\n                dollyEnd.set(x, y);\r\n                dollyDelta.subVectors(dollyEnd, dollyStart);\r\n                if (dollyDelta.y > 0) {\r\n                    scope.constraint.dollyIn(getZoomScale());\r\n                } else if (dollyDelta.y < 0) {\r\n                    scope.constraint.dollyOut(getZoomScale());\r\n                }\r\n                dollyStart.copy(dollyEnd);\r\n            } else if (scope._state === OrbitControls.STATE.PAN) {\r\n                if (scope.enablePan === false) {\r\n                    return;\r\n                }\r\n                panEnd.set(x, y);\r\n                panDelta.subVectors(panEnd, panStart);\r\n                pan(panDelta.x, panDelta.y);\r\n                panStart.copy(panEnd);\r\n            } else if (!scope._map.currentMission.onMouseMove(scope, x, y)) {\r\n                // TODO:\r\n            }\r\n            if (scope._state !== OrbitControls.STATE.NONE) {\r\n                scope.update();\r\n            }\r\n        }\r\n        function onWebMouseMove(event) {\r\n            event.preventDefault();\r\n            onMouseMove(event.clientX, event.clientY);\r\n        }\r\n\r\n        function onMouseUp(x, y) {\r\n            if (scope.enabled === false) {\r\n                return;\r\n            }\r\n            // if (!scope._isMouseDown) return;\r\n            scope._isMouseDown = false;\r\n            scope._state = OrbitControls.STATE.NONE;\r\n        }\r\n        function onWebMouseUp(event) {\r\n            event.preventDefault();\r\n            onMouseUp(event.clientX, event.clientY);\r\n        }\r\n\r\n        function onMouseWheel(x, y, wheelX, wheelY) {\r\n            // if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n            const delta = wheelY;\r\n            scope.constraint.dollyOut(getZoomScale(delta));\r\n            scope.update();\r\n            // scope.dispatchEvent(startEvent);\r\n            // scope.dispatchEvent(endEvent);\r\n            // off-center zooming :D\r\n            if (scope.camera.position.y >= scope.maxDistance) {\r\n                return;\r\n            }\r\n            const direction = -delta * 0.001001001;\r\n            pan(direction * (x - scope.canvas.width / 2), direction * (y - scope.canvas.height / 2));\r\n        }\r\n        function onWebMouseWheel(event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            if (event.wheelDelta !== undefined) {\r\n                // WebKit / Opera / Explorer 9\r\n                onMouseWheel(event.clientX, event.clientY, 0, event.wheelDelta);\r\n            } else if (event.detail !== undefined) {\r\n                // Firefox\r\n                onMouseWheel(event.clientX, event.clientY, 0, -event.detail);\r\n            }\r\n        }\r\n        function onKeyDown(event) {\r\n            if (scope.keyDown || scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) {\r\n                return;\r\n            }\r\n            scope.keyDown = // TODO: timer.\r\n                setInterval(() => {\r\n                    switch (event.key) {\r\n                        case scope.keys.UP:\r\n                            pan(0, scope.keyPanSpeed);\r\n                            scope.update();\r\n                            break;\r\n                        case scope.keys.BOTTOM:\r\n                            pan(0, -scope.keyPanSpeed);\r\n                            scope.update();\r\n                            break;\r\n                        case scope.keys.LEFT:\r\n                            pan(scope.keyPanSpeed, 0);\r\n                            scope.update();\r\n                            break;\r\n                        case scope.keys.RIGHT:\r\n                            pan(-scope.keyPanSpeed, 0);\r\n                            scope.update();\r\n                            break;\r\n                    }\r\n                }, 10);\r\n        }\r\n        function onKeyUp(event) {\r\n            // TIMER: timer.\r\n            if (typeof Qt === 'object') {\r\n                timer.clearInterval(scope.keyDown);\r\n            } else {\r\n                clearInterval(scope.keyDown);\r\n            }\r\n            scope.keyDown = false;\r\n        }\r\n        function touchstart(event) {\r\n            if (scope.enabled === false) {\r\n                return;\r\n            }\r\n            switch (event.touches.length) {\r\n                case 1: // one-fingered touch: rotate\r\n                    if (scope.enableRotate === false) {\r\n                        return;\r\n                    }\r\n                    scope._state = OrbitControls.STATE.TOUCH_ROTATE;\r\n                    rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n                    break;\r\n                case 2: // two-fingered touch: dolly\r\n                    if (scope.enableZoom === false) {\r\n                        return;\r\n                    }\r\n                    scope._state = OrbitControls.STATE.TOUCH_DOLLY;\r\n                    const dx = event.touches[0].pageX - event.touches[1].pageX;\r\n                    const dy = event.touches[0].pageY - event.touches[1].pageY;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    dollyStart.set(0, distance);\r\n                    break;\r\n                case 3: // three-fingered touch: pan\r\n                    if (scope.enablePan === false) {\r\n                        return;\r\n                    }\r\n                    scope._state = OrbitControls.STATE.TOUCH_PAN;\r\n                    panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n                    break;\r\n                default:\r\n                    scope._state = OrbitControls.STATE.NONE;\r\n            }\r\n        }\r\n        function touchmove(event) {\r\n            if (scope.enabled === false) {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            const element = (scope._map._renderer.domElement as any) === document ?\r\n                (scope._map._renderer.domElement as any).body : scope._map._renderer.domElement;\r\n            switch (event.touches.length) {\r\n                case 1: // one-fingered touch: rotate\r\n                    if (scope.enableRotate === false) {\r\n                        return;\r\n                    }\r\n                    if (scope._state !== OrbitControls.STATE.TOUCH_ROTATE) {\r\n                        return;\r\n                    }\r\n                    rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n                    rotateDelta.subVectors(rotateEnd, rotateStart);\r\n                    // rotating across whole screen goes 360 degrees around\r\n                    scope.constraint.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\r\n                    // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n                    scope.constraint.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\r\n                    rotateStart.copy(rotateEnd);\r\n                    scope.update();\r\n                    break;\r\n                case 2: // two-fingered touch: dolly\r\n                    if (scope.enableZoom === false) {\r\n                        return;\r\n                    }\r\n                    if (scope._state !== OrbitControls.STATE.TOUCH_DOLLY) {\r\n                        return;\r\n                    }\r\n                    const dx = event.touches[0].pageX - event.touches[1].pageX;\r\n                    const dy = event.touches[0].pageY - event.touches[1].pageY;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    dollyEnd.set(0, distance);\r\n                    dollyDelta.subVectors(dollyEnd, dollyStart);\r\n                    if (dollyDelta.y > 0) {\r\n                        scope.constraint.dollyOut(getZoomScale());\r\n                    } else if (dollyDelta.y < 0) {\r\n                        scope.constraint.dollyIn(getZoomScale());\r\n                    }\r\n                    dollyStart.copy(dollyEnd);\r\n                    scope.update();\r\n                    break;\r\n                case 3: // three-fingered touch: pan\r\n                    if (scope.enablePan === false) {\r\n                        return;\r\n                    }\r\n                    if (scope._state !== OrbitControls.STATE.TOUCH_PAN) {\r\n                        return;\r\n                    }\r\n                    panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n                    panDelta.subVectors(panEnd, panStart);\r\n                    pan(panDelta.x, panDelta.y);\r\n                    panStart.copy(panEnd);\r\n                    scope.update();\r\n                    break;\r\n                default:\r\n                    scope._state = OrbitControls.STATE.NONE;\r\n            }\r\n        }\r\n        function touchend() {\r\n            if (scope.enabled === false) {\r\n                return;\r\n            }\r\n            // scope.dispatchEvent(endEvent);\r\n            scope._state = OrbitControls.STATE.NONE;\r\n        }\r\n        this.dispose = function() {\r\n            if (typeof Qt === 'object') {\r\n                scope.eventSource.mouseDown.disconnect(onMouseDown);\r\n                scope.eventSource.mouseMove.disconnect(onMouseMove);\r\n                this.eventSource.mouseMove.disconnect(onMouseUp);\r\n                scope.eventSource.mouseWheel.disconnect(onMouseWheel);\r\n                scope.eventSource.keyDown.disconnect(onKeyDown);\r\n            } else {\r\n                this._map._renderer.domElement.removeEventListener('contextmenu', contextmenu, false);\r\n                this._map._renderer.domElement.removeEventListener('mousedown', onWebMouseDown, false);\r\n                this._map._renderer.domElement.removeEventListener('mouseup', onWebMouseUp, false);\r\n                this._map._renderer.domElement.removeEventListener('mousemove', onWebMouseMove, false);\r\n                this._map._renderer.domElement.removeEventListener('mousewheel', onWebMouseWheel, false);\r\n                this._map._renderer.domElement.removeEventListener('touchstart', touchstart, false);\r\n                this._map._renderer.domElement.removeEventListener('touchend', touchend, false);\r\n                this._map._renderer.domElement.removeEventListener('touchmove', touchmove, false);\r\n            }\r\n        };\r\n        // this.domElement.addEventListener( 'contextmenu', contextmenu, false );\r\n        if (typeof Qt === 'object') {\r\n            this.eventSource.mouseDown.connect(onMouseDown);\r\n            this.eventSource.mouseMove.connect(onMouseMove);\r\n            this.eventSource.mouseUp.connect(onMouseUp);\r\n            this.eventSource.mouseWheel.connect(onMouseWheel);\r\n            this.eventSource.keyDown.connect(onKeyDown);\r\n            this.eventSource.keyUp.connect(onKeyUp);\r\n        } else {\r\n            this._map._renderer.domElement.addEventListener('mousedown', onWebMouseDown, false);\r\n            this._map._renderer.domElement.addEventListener('mousemove', onWebMouseMove, false);\r\n            this._map._renderer.domElement.addEventListener('mouseup', onWebMouseUp, false);\r\n            this._map._renderer.domElement.addEventListener('mousewheel', onWebMouseWheel, false);\r\n            this._map._renderer.domElement.addEventListener('touchstart', touchstart, false);\r\n            this._map._renderer.domElement.addEventListener('touchend', touchend, false);\r\n            this._map._renderer.domElement.addEventListener('touchmove', touchmove, false);\r\n        }\r\n        // force an update at start\r\n        this.update();\r\n    }\r\n\r\n    getPolarAngle() {\r\n        return this.constraint.getPolarAngle();\r\n    }\r\n    getAzimuthalAngle() {\r\n        return this.constraint.getAzimuthalAngle();\r\n    }\r\n    update() {\r\n        // Pause camera when debuging\r\n        if (this._map.quadTree && this._map.quadTree._debug.suspendLodUpdate) {\r\n            return;\r\n        }\r\n        if (this.autoRotate && this._state === OrbitControls.STATE.NONE) {\r\n            this.constraint.rotateLeft(getAutoRotationAngle(this));\r\n        }\r\n        if (this.constraint.update() === true) {\r\n            // this.dispatchEvent(changeEvent);\r\n        }\r\n    }\r\n    reset() {\r\n        this._state = OrbitControls.STATE.NONE;\r\n        this.camera.target.copy(this.target0);\r\n        this.camera.position.copy(this.position0);\r\n        this.camera.zoom = this.zoom0;\r\n        this.camera.updateProjectionMatrix();\r\n        // this.dispatchEvent(changeEvent);\r\n        this.update();\r\n    }\r\n    /**\r\n     * Set camrea view\r\n     * @param {Cartographic} position - Cartographic position\r\n     * @param {number} zoom - Zoom distance\r\n     * @param {number} duration\r\n     */\r\n    setView(position: Cartographic, zoom: number, duration?: number) {\r\n        // TODO: duration as animation\r\n        duration = duration || 0;\r\n        sphericalMercator.CartographicToPixel(position, px);\r\n        // FIXME: Y = elevation data\r\n        this.constraint.camera.target.set(px.x, 0, px.z);\r\n        this.constraint.targetDistance = Math.pow(0.5, zoom) * MapSettings.cameraDistance;\r\n        this.update();\r\n        // camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n        // this.quadTree.needUpdate = true;\r\n    }\r\n    guide(vehicle) {\r\n        this._mode = OrbitControls.MODE.GUIDE;\r\n        this.target0 = this.constraint.target.clone();\r\n        this.constraint.target = vehicle.position;\r\n        this.constraint.targetDistance = vehicle.height * 2;\r\n        this.update();\r\n    }\r\n\r\n    get camera() { return this.constraint.camera; }\r\n    get target() { return this.constraint.target; }\r\n    get minDistance() { return this.constraint.minDistance; }\r\n    set minDistance(value) { this.constraint.minDistance = value; }\r\n    get maxDistance() { return this.constraint.maxDistance; }\r\n    set maxDistance(value) { this.constraint.maxDistance = value; }\r\n    // get minZoom() { return this.constraint.minZoom; }\r\n    // set minZoom(value) { this.constraint.minZoom = value; }\r\n    // get maxZoom() { return this.constraint.maxZoom; }\r\n    // set maxZoom(value) { this.constraint.maxZoom = value; }\r\n    get minPolarAngle() { return this.constraint.minPolarAngle; }\r\n    set minPolarAngle(value) { this.constraint.minPolarAngle = value; }\r\n    get maxPolarAngle() { return this.constraint.maxPolarAngle; }\r\n    set maxPolarAngle(value) { this.constraint.maxPolarAngle = value; }\r\n    get minAzimuthAngle() { return this.constraint.minAzimuthAngle; }\r\n    set minAzimuthAngle(value) { this.constraint.minAzimuthAngle = value; }\r\n    get maxAzimuthAngle() { return this.constraint.maxAzimuthAngle; }\r\n    set maxAzimuthAngle(value) { this.constraint.maxAzimuthAngle = value; }\r\n    get enableDamping() { return this.constraint.enableDamping; }\r\n    set enableDamping(value) { this.constraint.enableDamping = value; }\r\n    get dampingFactor() { return this.constraint.dampingFactor; }\r\n    set dampingFactor(value) { this.constraint.dampingFactor = value; }\r\n}\r\n","const eps = 0.0000001;\r\nfunction between(a, b, c) {\r\n    return a - eps <= b && b <= c + eps;\r\n}\r\n\r\nexport class GeometricHelper {\r\n    static pointInsidePolygon(polygon, pt) {\r\n        // Ray-casting algorithm only 2D x-z\r\n        const x = pt.x;\r\n        const z = pt.z;\r\n        let inside = false;\r\n        for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\r\n            const xi = polygon[i].x;\r\n            const zi = polygon[i].z;\r\n            const xj = polygon[j].x;\r\n            const zj = polygon[j].z;\r\n\r\n            const intersect = ((zi >= z) !== (zj >= z)) &&\r\n                (x < (xj - xi) * (z - zi) / (zj - zi) + xi);\r\n            if (intersect) {\r\n                inside = !inside;\r\n            }\r\n        }\r\n\r\n        return inside;\r\n\r\n        // return inside([pt.x, pt.z], polygon.map(function (p) { return [p.x, p.z]; }));\r\n\r\n        // return classifyPoint(polygon.map(function (p) { return [p.x, p.z]; }), [pt.x, pt.z]) < 1;\r\n    }\r\n\r\n    static lineIntersects(l1, l2) {\r\n        const a = l1[0].x;\r\n        const b = l1[0].z;\r\n        const c = l1[1].x;\r\n        const d = l1[1].z;\r\n        const p = l2[0].x;\r\n        const q = l2[0].z;\r\n        const r = l2[1].x;\r\n        const s = l2[1].z;\r\n        let det;\r\n        let gamma;\r\n        let lambda;\r\n        det = (c - a) * (s - q) - (r - p) * (d - b);\r\n        if (det === 0) {\r\n          return false;\r\n        } else {\r\n          lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\r\n          gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\r\n          return (0 < lambda && lambda < 1) && (0 < gamma && gamma < 1);\r\n        }\r\n        // const x = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) /\r\n        //         ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\r\n        // const y = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) /\r\n        //         ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\r\n        // if (isNaN(x) || isNaN(y)) {\r\n        //     return false;\r\n        // } else {\r\n        //     if (x1 >= x2) {\r\n        //         if (!between(x2, x, x1)) { return false; }\r\n        //     } else {\r\n        //         if (!between(x1, x, x2)) { return false; }\r\n        //     }\r\n        //     if (y1 >= y2) {\r\n        //         if (!between(y2, y, y1)) { return false; }\r\n        //     } else {\r\n        //         if (!between(y1, y, y2)) { return false; }\r\n        //     }\r\n        //     if (x3 >= x4) {\r\n        //         if (!between(x4, x, x3)) { return false; }\r\n        //     } else {\r\n        //         if (!between(x3, x, x4)) { return false; }\r\n        //     }\r\n        //     if (y3 >= y4) {\r\n        //         if (!between(y4, y, y3)) { return false; }\r\n        //     } else {\r\n        //         if (!between(y3, y, y4)) { return false; }\r\n        //     }\r\n        // }\r\n        // return true;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { TileConstructor } from '../SceneMode/Tile';\r\n\r\nexport interface PoolOptions {\r\n    instance: TileConstructor;\r\n    size?: number;\r\n}\r\n\r\nexport class Pool {\r\n    _length: number;\r\n    _usingNodes: { [key: string]: THREE.Mesh };\r\n    _freeNodes: THREE.Mesh[];\r\n    create: () => THREE.Mesh;\r\n\r\n    constructor(options: PoolOptions) {\r\n        this._length = options.size || 16;\r\n        this._usingNodes = {};\r\n        this._freeNodes = [];\r\n\r\n        this.create = options.instance.createMesh;\r\n\r\n        for (let i = 0; i < this._length; i++) {\r\n            this._freeNodes.push(this.create());\r\n        }\r\n    }\r\n    duplicate() {\r\n        const length = this._length;\r\n        for (let i = 0; i < length; i++) {\r\n            this._freeNodes.push(this.create());\r\n        }\r\n        this._length *= 2;\r\n    }\r\n    get(index: string) {\r\n        if (!this._usingNodes[index]) {\r\n            throw new Error(`${index} isn't in used.`);\r\n        }\r\n        return this._usingNodes[index];\r\n    }\r\n    use(index: string) {\r\n        const node = this._freeNodes.pop();\r\n        this._usingNodes[index] = node;\r\n        return node;\r\n    }\r\n    free(index: string) {\r\n        const node = this._usingNodes[index];\r\n        delete this._usingNodes[index];\r\n        this._freeNodes.push(node);\r\n    }\r\n\r\n    get length() {\r\n        return this._length;\r\n    }\r\n}\r\n","import { Tile } from '../SceneMode/Tile';\r\n\r\nexport class TileReplacementQueue {\r\n    head: Tile;\r\n    tail: Tile;\r\n    count: number;\r\n    _lastBeforeStartOfFrame: Tile;\r\n\r\n    constructor() {\r\n        this.head = undefined;\r\n        this.tail = undefined;\r\n        this.count = 0;\r\n        this._lastBeforeStartOfFrame = undefined;\r\n    }\r\n    /**\r\n     * Marks the start of the render frame.  Tiles before (closer to the head) this tile in the\r\n     * list were used last frame and must not be unloaded.\r\n     */\r\n    markStartOfRenderFrame() {\r\n        this._lastBeforeStartOfFrame = this.head;\r\n    }\r\n    /**\r\n     * Reduces the size of the queue to a specified size by unloading the least-recently used\r\n     * tiles.  Tiles that were used last frame will not be unloaded, even if that puts the number\r\n     * of tiles above the specified maximum.\r\n     *\r\n     * @param {Number} maximumTiles The maximum number of tiles in the queue.\r\n     */\r\n    trimTiles(maximumTiles: number) {\r\n        let tileToTrim = this.tail;\r\n        let keepTrimming = true;\r\n        while (keepTrimming &&\r\n            this._lastBeforeStartOfFrame &&\r\n            this.count > maximumTiles &&\r\n            tileToTrim) {\r\n            // Stop trimming after we process the last tile not used in the\r\n            // current frame.\r\n            keepTrimming = tileToTrim !== this._lastBeforeStartOfFrame;\r\n\r\n            const previous = tileToTrim.replacementPrevious;\r\n\r\n            if (tileToTrim.eligibleForUnloading) {\r\n                remove(this, tileToTrim);\r\n                tileToTrim.dispose();\r\n            }\r\n            tileToTrim = previous;\r\n        }\r\n\r\n        // if (this.count > maximumTiles) {\r\n        // let tileToTrim2 = this.tail;\r\n        // while(tileToTrim2) {\r\n        //     const previous = tileToTrim2.replacementPrevious;\r\n        //     console.log(tileToTrim2.stringify, tileToTrim2.quadTree._activeTiles.indexOf(tileToTrim2))\r\n        //     tileToTrim2 = previous;\r\n        // }\r\n        // }\r\n    }\r\n\r\n    markTileRendered(item: Tile) {\r\n        const head = this.head;\r\n        if (head === item) {\r\n            if (item === this._lastBeforeStartOfFrame) {\r\n                this._lastBeforeStartOfFrame = item.replacementNext;\r\n            }\r\n            return;\r\n        }\r\n        ++this.count;\r\n        if (!head) {\r\n            // no other tiles in the list\r\n            item.replacementPrevious = undefined;\r\n            item.replacementNext = undefined;\r\n            this.head = item;\r\n            this.tail = item;\r\n            return;\r\n        }\r\n        if (item.replacementPrevious || item.replacementNext) {\r\n            // tile already in the list, remove from its current location\r\n            remove(this, item);\r\n        }\r\n        item.replacementPrevious = undefined;\r\n        item.replacementNext = head;\r\n        head.replacementPrevious = item;\r\n\r\n        this.head = item;\r\n    }\r\n}\r\n\r\nfunction remove(tileReplacementQueue: TileReplacementQueue, item: Tile) {\r\n    const previous = item.replacementPrevious;\r\n    const next = item.replacementNext;\r\n\r\n    if (item === tileReplacementQueue._lastBeforeStartOfFrame) {\r\n        tileReplacementQueue._lastBeforeStartOfFrame = next;\r\n    }\r\n\r\n    if (item === tileReplacementQueue.head) {\r\n        tileReplacementQueue.head = next;\r\n    } else {\r\n        previous.replacementNext = next;\r\n    }\r\n\r\n    if (item === tileReplacementQueue.tail) {\r\n        tileReplacementQueue.tail = previous;\r\n    } else {\r\n        next.replacementPrevious = previous;\r\n    }\r\n\r\n    item.replacementPrevious = undefined;\r\n    item.replacementNext = undefined;\r\n\r\n    --tileReplacementQueue.count;\r\n}\r\n","import * as THREE from 'three';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { Camera } from '../Renderer/Camera';\r\nimport { OrbitControls } from '../Renderer/OrbitControls';\r\nimport { SceneMode } from '../SceneMode/SceneMode';\r\nimport { Tile, TileConstructor } from '../SceneMode/Tile';\r\nimport { GeometricHelper } from '../Utility/GeometricHelper';\r\nimport { Map3D } from './Map3D';\r\nimport { Pool } from './Pool';\r\nimport { TileReplacementQueue } from './TileReplacementQueue';\r\nimport { TilingScheme } from './TilingScheme';\r\n\r\nexport interface QuadTreeOptions {\r\n    map: Map3D;\r\n    mode: SceneMode;\r\n    maximumScreenSpaceError?: number;\r\n    tileCacheSize?: number;\r\n}\r\n\r\nexport class QuadTree {\r\n    _map: Map3D;\r\n\r\n    scene: THREE.Scene;\r\n    tiles: THREE.Group;\r\n\r\n    camera: Camera;\r\n    cameraController: OrbitControls;\r\n\r\n    mode: SceneMode;\r\n\r\n    _rootTile: Tile[];\r\n    _activeTiles: Tile[];\r\n    _tileLoadQueueHigh: Tile[];\r\n    _tileLoadQueueMedium: Tile[];\r\n    _tileLoadQueueLow: Tile[];\r\n\r\n    _tileReplacementQueue: TileReplacementQueue;\r\n\r\n    _loadQueueTimeSlice: number;\r\n\r\n    maximumScreenSpaceError: number;\r\n\r\n    tileCacheSize: number;\r\n\r\n    maxDepth: number;\r\n\r\n    _lastTileLoadQueueLength: number;\r\n\r\n    needUpdate: boolean;\r\n\r\n    _debug: {\r\n        enableDebugOutput: boolean;\r\n        maxDepth: number;\r\n        tilesVisited: number;\r\n        tilesCulled: number;\r\n        tilesRendered: number;\r\n        tilesWaitingForChildren: number;\r\n        lastMaxDepth: number;\r\n        lastTilesVisited: number;\r\n        lastTilesCulled: number;\r\n        lastTilesRendered: number;\r\n        lastTilesWaitingForChildren: number;\r\n        suspendLodUpdate: boolean;\r\n    };\r\n\r\n    _pool: Pool;\r\n\r\n    constructor(options: QuadTreeOptions) {\r\n        this._map = options.map;\r\n\r\n        this.scene = options.map.scene;\r\n\r\n        this.tiles = new THREE.Group();\r\n        this.tiles.name = 'Tiles';\r\n        this.scene.add(this.tiles);\r\n\r\n        this.cameraController = options.map.cameraController;\r\n        this.camera = options.map.camera;\r\n\r\n        this._rootTile = options.mode.createRootTile(this);\r\n        /**\r\n         * Scene mode\r\n         * @type {SceneMode}\r\n         */\r\n        this.mode = options.mode;\r\n\r\n        this._activeTiles = [];\r\n        this._tileLoadQueueHigh = []; // high priority tiles are preventing refinement\r\n        this._tileLoadQueueMedium = []; // medium priority tiles are being rendered\r\n        this._tileLoadQueueLow = []; // low priority tiles were refined past or are non-visible parts of quads.\r\n\r\n        this._tileReplacementQueue = new TileReplacementQueue();\r\n\r\n        this._loadQueueTimeSlice = 5.0;\r\n\r\n        this.maximumScreenSpaceError = options.maximumScreenSpaceError || 2;\r\n\r\n        this.tileCacheSize = options.tileCacheSize || 256;\r\n\r\n        this.maxDepth = 22;\r\n\r\n        this._lastTileLoadQueueLength = 0;\r\n\r\n        this.needUpdate = true;\r\n\r\n        this._debug = {\r\n            enableDebugOutput: true,\r\n\r\n            maxDepth: 0,\r\n            tilesVisited: 0,\r\n            tilesCulled: 0,\r\n            tilesRendered: 0,\r\n            tilesWaitingForChildren: 0,\r\n\r\n            lastMaxDepth: -1,\r\n            lastTilesVisited: -1,\r\n            lastTilesCulled: -1,\r\n            lastTilesRendered: -1,\r\n            lastTilesWaitingForChildren: -1,\r\n\r\n            suspendLodUpdate: false,\r\n        };\r\n\r\n        this._pool = new Pool({\r\n            instance: this.mode.instance,\r\n        });\r\n    }\r\n\r\n    suspendLodUpdate(value) {\r\n        this._debug.suspendLodUpdate = value;\r\n    }\r\n\r\n    update() {\r\n        // If not thing need to update, do noting\r\n        if (!this.needUpdate || this._debug.suspendLodUpdate) {\r\n            return;\r\n        }\r\n        this.needUpdate = false;\r\n\r\n        // Compute frustum of camera\r\n        this.camera.update();\r\n\r\n        clearTileLoadQueue(this);\r\n\r\n        this._tileReplacementQueue.markStartOfRenderFrame();\r\n\r\n        selectTilesForRendering(this);\r\n\r\n        renderTiles(this, this._activeTiles);\r\n\r\n        processTileLoadQueue(this);\r\n\r\n        updateTileLoadProgress(this);\r\n\r\n        this.camera.updatedLastFrame = false;\r\n    }\r\n}\r\n\r\nfunction clearTileLoadQueue(primitive: QuadTree) {\r\n    const debug = primitive._debug;\r\n    debug.maxDepth = 0;\r\n    debug.tilesVisited = 0;\r\n    debug.tilesCulled = 0;\r\n    debug.tilesRendered = 0;\r\n    debug.tilesWaitingForChildren = 0;\r\n\r\n    primitive._tileLoadQueueHigh.length = 0;\r\n    primitive._tileLoadQueueMedium.length = 0;\r\n    primitive._tileLoadQueueLow.length = 0;\r\n}\r\n\r\nfunction selectTilesForRendering(primitive: QuadTree) {\r\n    const debug = primitive._debug;\r\n\r\n    // Clear the render list.\r\n    const tilesToRender = primitive._activeTiles;\r\n    tilesToRender.length = 0;\r\n\r\n    // We can't render anything before the level zero tiles exist.\r\n    // var tileProvider = primitive._tileProvider;\r\n\r\n    let tile: Tile;\r\n    const rootTiles = primitive._rootTile;\r\n\r\n    // Our goal with load ordering is to first load all of the tiles we need to\r\n    // render the current scene at full detail.  Loading any other tiles is just\r\n    // a form of prefetching, and we need not do it at all (other concerns aside).  This\r\n    // simple and obvious statement gets more complicated when we realize that, because\r\n    // we don't have bounding volumes for the entire terrain tile pyramid, we don't\r\n    // precisely know which tiles we need to render the scene at full detail, until we do\r\n    // some loading.\r\n    //\r\n    // So our load priority is (from high to low):\r\n    // 1. Tiles that we _would_ render, except that they're not sufficiently loaded yet.\r\n    //    Ideally this would only include tiles that we've already determined to be visible,\r\n    //    but since we don't have reliable visibility information until a tile is loaded,\r\n    //    and because we (currently) must have all children in a quad renderable before we\r\n    //    can refine, this pretty much means tiles we'd like to refine to, regardless of\r\n    //    visibility. (high)\r\n    // 2. Tiles that we're rendering. (medium)\r\n    // 3. All other tiles. (low)\r\n    //\r\n    // Within each priority group, tiles should be loaded in approximate near-to-far order,\r\n    // but currently they're just loaded in our traversal order which makes no guarantees\r\n    // about depth ordering.\r\n\r\n    // Traverse in depth-first, near-to-far order.\r\n    for (let i = 0, len = rootTiles.length; i < len; ++i) {\r\n        tile = rootTiles[i];\r\n        primitive._tileReplacementQueue.markTileRendered(tile);\r\n        if (!tile.renderable) {\r\n            if (tile.needsLoading) {\r\n                primitive._tileLoadQueueHigh.push(tile);\r\n            }\r\n            ++debug.tilesWaitingForChildren;\r\n        } else if (computeTileVisibility(primitive, tile)) {\r\n            visitTile(primitive, tile);\r\n        } else {\r\n            if (tile.needsLoading) {\r\n                primitive._tileLoadQueueLow.push(tile);\r\n            }\r\n            ++debug.tilesCulled;\r\n        }\r\n    }\r\n}\r\n\r\nfunction visitTile(primitive: QuadTree, tile: Tile) {\r\n    const debug = primitive._debug;\r\n\r\n    ++debug.tilesVisited;\r\n\r\n    primitive._tileReplacementQueue.markTileRendered(tile);\r\n\r\n    if (tile.z > debug.maxDepth) {\r\n        debug.maxDepth = tile.z;\r\n    }\r\n\r\n    if (primitive.mode.screenSpaceError(primitive, tile) < primitive.maximumScreenSpaceError) {\r\n        // This tile meets SSE requirements, so render it.\r\n        if (tile.needsLoading) {\r\n            // Rendered tile meeting SSE loads with medium priority.\r\n            primitive._tileLoadQueueMedium.push(tile);\r\n        }\r\n        addTileToRenderList(primitive, tile);\r\n        return;\r\n    }\r\n\r\n    const allAreRenderable = tile.children[0].renderable && tile.children[1].renderable\r\n        && tile.children[2].renderable && tile.children[3].renderable;\r\n    const allAreUpsampled = tile.children[0].upsampledFromParent && tile.children[1].upsampledFromParent &&\r\n        tile.children[2].upsampledFromParent && tile.children[3].upsampledFromParent;\r\n\r\n    if (allAreRenderable) {\r\n        if (allAreUpsampled) {\r\n            // No point in rendering the children because they're all upsampled.  Render this tile instead.\r\n            addTileToRenderList(primitive, tile);\r\n\r\n            // Load the children even though we're (currently) not going to render them.\r\n            // A tile that is \"upsampled only\" right now might change its tune once it does more loading.\r\n            // A tile that is upsampled now and forever should also be done loading, so no harm done.\r\n            queueChildLoadNearToFar(primitive, primitive.camera.target, tile.children);\r\n\r\n            if (tile.needsLoading) {\r\n                // Rendered tile that's not waiting on children loads with medium priority.\r\n                primitive._tileLoadQueueMedium.push(tile);\r\n            }\r\n        } else {\r\n            // SSE is not good enough and children are loaded, so refine.\r\n            // No need to add the children to the load queue because\r\n            // they'll be added (if necessary) when they're visited.\r\n            visitVisibleChildrenNearToFar(primitive, tile.children);\r\n\r\n            if (tile.needsLoading) {\r\n                // Tile is not rendered, so load it with low priority.\r\n                primitive._tileLoadQueueLow.push(tile);\r\n            }\r\n        }\r\n    } else {\r\n        // We'd like to refine but can't because not all of our children are\r\n        // renderable.  Load the refinement blockers with high priority and\r\n        // render this tile in the meantime.\r\n        queueChildLoadNearToFar(primitive, primitive.camera.target, tile.children);\r\n        addTileToRenderList(primitive, tile);\r\n\r\n        if (tile.needsLoading) {\r\n            // We will refine this tile when it's possible, so load this tile only with low priority.\r\n            primitive._tileLoadQueueLow.push(tile);\r\n        }\r\n    }\r\n}\r\n\r\nfunction queueChildLoadNearToFar(primitive: QuadTree, cameraPosition: Cartesian, children: Tile[]) {\r\n    if (cameraPosition.x < children[0].bbox.xMax) {\r\n        if (cameraPosition.z < children[0].bbox.zMax) {\r\n            // Camera in northwest quadrant\r\n            queueChildTileLoad(primitive, children[0]);\r\n            queueChildTileLoad(primitive, children[2]);\r\n            queueChildTileLoad(primitive, children[1]);\r\n            queueChildTileLoad(primitive, children[3]);\r\n        } else {\r\n            // Camera in southwest quadrant\r\n            queueChildTileLoad(primitive, children[2]);\r\n            queueChildTileLoad(primitive, children[0]);\r\n            queueChildTileLoad(primitive, children[3]);\r\n            queueChildTileLoad(primitive, children[1]);\r\n        }\r\n    } else if (cameraPosition.z < children[0].bbox.zMax) {\r\n        // Camera northeast quadrant\r\n        queueChildTileLoad(primitive, children[1]);\r\n        queueChildTileLoad(primitive, children[3]);\r\n        queueChildTileLoad(primitive, children[0]);\r\n        queueChildTileLoad(primitive, children[2]);\r\n    } else {\r\n        // Camera in northeast quadrant\r\n        queueChildTileLoad(primitive, children[3]);\r\n        queueChildTileLoad(primitive, children[1]);\r\n        queueChildTileLoad(primitive, children[2]);\r\n        queueChildTileLoad(primitive, children[0]);\r\n    }\r\n}\r\n\r\nfunction queueChildTileLoad(primitive: QuadTree, childTile: Tile) {\r\n    // Tile is deeper than max stop\r\n    if (childTile.z > primitive.maxDepth) {\r\n        return;\r\n    }\r\n\r\n    primitive._tileReplacementQueue.markTileRendered(childTile);\r\n    if (childTile.needsLoading) {\r\n        if (childTile.renderable) {\r\n            primitive._tileLoadQueueLow.push(childTile);\r\n        } else {\r\n            // A tile blocking refine loads with high priority\r\n            primitive._tileLoadQueueHigh.push(childTile);\r\n        }\r\n    }\r\n}\r\n\r\nfunction visitVisibleChildrenNearToFar(primitive: QuadTree, children: Tile[]) {\r\n    const distances = children.map((child) => {\r\n        return { tile: child, distance: child.bbox.distanceFromPoint(primitive.camera.target) };\r\n    });\r\n    distances.sort((a, b) => {\r\n        return a.distance - b.distance;\r\n    });\r\n\r\n    distances.forEach(({ tile }) => visitIfVisible(primitive, tile));\r\n}\r\n\r\nfunction computeTileVisibility(primitive: QuadTree, tile: Tile) {\r\n    if (tile.z <= 10) {\r\n        const camera = primitive.cameraController.camera;\r\n\r\n        const matrix = new THREE.Matrix4().multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\r\n        const frustum = new THREE.Frustum().setFromMatrix(matrix);\r\n\r\n        // TODO: using AABB to Culling\r\n        return frustum.intersectsObject(tile.mesh);\r\n    }\r\n\r\n    let i;\r\n    const corner = tile.bbox.corner;\r\n    for (i = 0; i < 4; i++) {\r\n        if (GeometricHelper.pointInsidePolygon(corner, primitive.camera.culledGroundPlane[i])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < 4; i++) {\r\n        if (GeometricHelper.pointInsidePolygon(primitive.camera.culledGroundPlane, corner[i])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n            const l1 = [corner[i], corner[(i + 1) % 4]];\r\n            const l2 = [primitive.camera.culledGroundPlane[j], primitive.camera.culledGroundPlane[(j + 1) % 4]];\r\n            if (GeometricHelper.lineIntersects(l1, l2)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction visitIfVisible(primitive, tile) {\r\n    if (computeTileVisibility(primitive, tile)) {\r\n        visitTile(primitive, tile);\r\n    } else {\r\n        ++primitive._debug.tilesCulled;\r\n        primitive._tileReplacementQueue.markTileRendered(tile);\r\n\r\n        // We've decided this tile is not visible, but if it's not fully loaded yet, we've made\r\n        // this determination based on possibly-incorrect information.  We need to load this\r\n        // culled tile with low priority just in case it turns out to be visible after all.\r\n        if (tile.needsLoading) {\r\n            primitive._tileLoadQueueLow.push(tile);\r\n        }\r\n    }\r\n}\r\n\r\nfunction addTileToRenderList(primitive, tile) {\r\n    primitive._activeTiles.push(tile);\r\n\r\n    ++primitive._debug.tilesRendered;\r\n}\r\n\r\nfunction renderTiles(primitive: QuadTree, tiles: Tile[]) {\r\n    if (tiles.length === 0) {\r\n        return;\r\n    }\r\n\r\n    const pool = primitive._pool;\r\n\r\n    while (tiles.length > pool.length) {\r\n        pool.duplicate();\r\n    }\r\n\r\n    primitive.tiles.children.length = 0;\r\n\r\n    const target = primitive.camera.target;\r\n\r\n    tiles.forEach((tile) => {\r\n        // Recalculate tile position\r\n        const center = tile.bbox.center;\r\n        const mesh = tile.mesh;\r\n\r\n        mesh.position.set(center.x - target.x, center.y - target.y, center.z - target.z);\r\n        tile.applyDataToMesh(mesh);\r\n\r\n        primitive.tiles.add(mesh);\r\n    });\r\n}\r\n\r\nfunction processTileLoadQueue(primitive: QuadTree) {\r\n    const tileLoadQueueHigh = primitive._tileLoadQueueHigh;\r\n    const tileLoadQueueMedium = primitive._tileLoadQueueMedium;\r\n    const tileLoadQueueLow = primitive._tileLoadQueueLow;\r\n\r\n    if (tileLoadQueueHigh.length === 0 && tileLoadQueueMedium.length === 0 && tileLoadQueueLow.length === 0) {\r\n        return;\r\n    }\r\n\r\n    // Remove any tiles that were not used this frame beyond the number\r\n    // we're allowed to keep.\r\n    primitive._tileReplacementQueue.trimTiles(primitive.tileCacheSize);\r\n\r\n    const endTime = Date.now() + primitive._loadQueueTimeSlice;\r\n\r\n    processSinglePriorityLoadQueue(primitive, endTime, tileLoadQueueHigh);\r\n    processSinglePriorityLoadQueue(primitive, endTime, tileLoadQueueMedium);\r\n    processSinglePriorityLoadQueue(primitive, endTime, tileLoadQueueLow);\r\n}\r\n\r\nfunction processSinglePriorityLoadQueue(primitive: QuadTree, endTime: number, loadQueue: Tile[]) {\r\n    for (let i = 0, len = loadQueue.length; i < len && Date.now() < endTime; ++i) {\r\n        const tile = loadQueue[i];\r\n        primitive._tileReplacementQueue.markTileRendered(tile);\r\n\r\n        primitive.mode.providers.forEach((provider) => provider.loadTile(tile));\r\n    }\r\n}\r\n\r\nfunction updateTileLoadProgress(primitive) {\r\n    const currentLoadQueueLength = primitive._tileLoadQueueHigh.length +\r\n        primitive._tileLoadQueueMedium.length +\r\n        primitive._tileLoadQueueLow.length;\r\n\r\n    if (currentLoadQueueLength !== primitive._lastTileLoadQueueLength) {\r\n        primitive._lastTileLoadQueueLength = currentLoadQueueLength;\r\n    }\r\n\r\n    const debug = primitive._debug;\r\n    if (debug.enableDebugOutput && !debug.suspendLodUpdate) {\r\n        if (debug.tilesVisited !== debug.lastTilesVisited ||\r\n            debug.tilesRendered !== debug.lastTilesRendered ||\r\n            debug.tilesCulled !== debug.lastTilesCulled ||\r\n            debug.maxDepth !== debug.lastMaxDepth ||\r\n            debug.tilesWaitingForChildren !== debug.lastTilesWaitingForChildren) {\r\n            console.info('Visited ' + debug.tilesVisited + ', Rendered: ' + debug.tilesRendered +\r\n                ', Culled: ' + debug.tilesCulled + ', Max Depth: ' + debug.maxDepth +\r\n                ', Waiting for children: ' + debug.tilesWaitingForChildren);\r\n\r\n            debug.lastTilesVisited = debug.tilesVisited;\r\n            debug.lastTilesRendered = debug.tilesRendered;\r\n            debug.lastTilesCulled = debug.tilesCulled;\r\n            debug.lastMaxDepth = debug.maxDepth;\r\n            debug.lastTilesWaitingForChildren = debug.tilesWaitingForChildren;\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Renderer } from 'three';\r\nimport { Mission } from '../Object/Mission';\r\nimport { Polygon } from '../Object/Polygon';\r\nimport { Polyline } from '../Object/Polyline';\r\nimport { RenderingObject } from '../Object/RenderingObject';\r\nimport { Skybox } from '../Object/Skybox';\r\nimport { Vehicle } from '../Object/Vehicle';\r\nimport { Camera } from '../Renderer/Camera';\r\nimport { OrbitControls } from '../Renderer/OrbitControls';\r\nimport { SceneMode } from '../SceneMode/SceneMode';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { MapSettings } from './MapSettings';\r\nimport { QuadTree } from './QuadTree';\r\n\r\nexport interface IOptions {\r\n    mode: SceneMode;\r\n    canvas: QtCanvas;\r\n    eventSource?: EventSource;\r\n    renderer?: Renderer;\r\n    context2d?: Context2D;\r\n}\r\n\r\nexport class Map3D {\r\n    static State = {\r\n        GROUND: 0,\r\n        TAKEOFF: 1,\r\n    };\r\n\r\n    quadTree: QuadTree;\r\n\r\n    camera: Camera;\r\n    cameraController: OrbitControls;\r\n    scene: THREE.Scene;\r\n    canvas: QtCanvas;\r\n    context2d: Context2D;\r\n\r\n    _renderer: Renderer;\r\n    _subscribeObjects: RenderingObject[];\r\n\r\n    missions: Mission[];\r\n    _currentMission: Mission;\r\n\r\n    state: number;\r\n\r\n    vehicle: Vehicle;\r\n\r\n    constructor(options) {\r\n        this._subscribeObjects = [];\r\n        this._renderer = options.renderer;\r\n\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.camera = new Camera({ canvas: options.canvas, map: this });\r\n        this.camera.setPosition({ z: MapSettings.cameraDistance });\r\n\r\n        // TODO: target distance min 0.03527380584401122\r\n        this.cameraController = new OrbitControls({\r\n            map: this,\r\n            eventSource: options.eventSource,\r\n            canvas: options.canvas,\r\n        });\r\n\r\n        this.canvas = options.canvas;\r\n\r\n        this.context2d = options.context2d;\r\n\r\n        this.quadTree = new QuadTree({\r\n            map: this,\r\n            mode: options.mode,\r\n        });\r\n\r\n        this.missions = [];\r\n        this.newMission();\r\n\r\n        // Add skybox\r\n        const skybox = new Skybox();\r\n        this.scene.add(skybox);\r\n\r\n        /**\r\n         * @type {Vehicle}\r\n         */\r\n        this.vehicle = new Vehicle({ map: this });\r\n\r\n        this.state = Map3D.State.GROUND;\r\n    }\r\n\r\n    get currentMission() {\r\n        if (!this._currentMission) {\r\n            this._currentMission = new Polygon({ map: this });\r\n            this.missions.push(this._currentMission);\r\n        }\r\n        return this._currentMission;\r\n    }\r\n\r\n    get vehiclePosition() {\r\n        return this.vehicle.position;\r\n    }\r\n    set vehiclePosition(cartographic: Cartographic) {\r\n        this.vehicle.position = cartographic;\r\n    }\r\n\r\n    newMission(type?: string) {\r\n        this._currentMission = (type === 'Polyline') ? new Polyline({ map: this }) : new Polygon({ map: this });\r\n        this.missions.push(this._currentMission);\r\n        return this._currentMission;\r\n    }\r\n\r\n    update() {\r\n        // Quad Tree update\r\n        this.quadTree.update();\r\n\r\n        // Mission update\r\n        const scale = this.cameraController.constraint.targetDistance *\r\n            sphericalMercator.mPerPixel() * 4.0 / this.canvas.height;\r\n\r\n        this.vehicle.setScale(scale);\r\n        this.missions.forEach((mission) => {\r\n            mission.pins.forEach((pin) => {\r\n                pin.setScale(scale);\r\n            });\r\n        });\r\n    }\r\n\r\n    generateGrid(type?: string) {\r\n        (this._currentMission as Polygon).generateGrid(type || 'opt', 4);\r\n    }\r\n\r\n    guide() {\r\n        this.cameraController.guide(this.vehicle);\r\n    }\r\n\r\n    setView(position: Cartographic, zoom: number) {\r\n        this.cameraController.setView(position, zoom);\r\n    }\r\n\r\n    resizeView(canvas: QtCanvas) {\r\n        this.camera.aspect = canvas.width / canvas.height;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        if ((this._renderer as any).setPixelRatio) {\r\n            (this._renderer as any).setPixelRatio(canvas.devicePixelRatio);\r\n        }\r\n        this._renderer.setSize(canvas.width, canvas.height);\r\n    }\r\n\r\n    addSubscribeObject(object: RenderingObject) {\r\n        this._subscribeObjects.push(object);\r\n    }\r\n\r\n    removeSubscribeObject(object: RenderingObject) {\r\n        const index = this._subscribeObjects.indexOf(object);\r\n\r\n        if (index !== -1) {\r\n            this._subscribeObjects.splice(index, 1);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n","import { Ellipsoid } from '../Math/Ellipsoid';\r\n\r\nexport interface TilingSchemeOptions {\r\n    numberOfLevelZeroTilesX: number;\r\n    numberOfLevelZeroTilesY: number;\r\n}\r\n\r\nexport class TilingScheme {\r\n    private _ellipsoid: Ellipsoid;\r\n    private _numberOfLevelZeroTilesX: number;\r\n    private _numberOfLevelZeroTilesY: number;\r\n    constructor(options: TilingSchemeOptions) {\r\n        this._ellipsoid = new Ellipsoid(6378137.0, 6378137.0, 6356752.3142451793);\r\n        this._numberOfLevelZeroTilesX = options.numberOfLevelZeroTilesX;\r\n        this._numberOfLevelZeroTilesY = options.numberOfLevelZeroTilesY;\r\n    }\r\n\r\n    getNumberOfXTilesAtLevel(level) {\r\n        return this._numberOfLevelZeroTilesX << level;\r\n    }\r\n\r\n    getNumberOfYTilesAtLevel(level) {\r\n        return this._numberOfLevelZeroTilesY << level;\r\n    }\r\n\r\n    get ellipsoid() { return this._ellipsoid; }\r\n}\r\n","import { Tile } from '../SceneMode/Tile';\r\nimport { DataSourceLayer, DataSourceLayerConstructor } from './DataSourceLayer';\r\n\r\nexport interface Status {\r\n    [key: string]: number;\r\n}\r\n\r\nexport class DataSource {\r\n    static State = {\r\n        Idle: 1,\r\n        Loading: 2,\r\n        Loaded: 3,\r\n        Failed: 4,\r\n    };\r\n\r\n    _layers: DataSourceLayer[];\r\n    _tile: Tile;\r\n    status: Status;\r\n\r\n    constructor(options) {\r\n        if (!options) {\r\n            throw new Error('DataSource must provided arguments.');\r\n        }\r\n        if (!options.layers) {\r\n            throw new Error('DataSource must provided options.layers');\r\n        }\r\n        if (!options.tile) {\r\n            throw new Error('DataSource must provided options.tile');\r\n        }\r\n        /**\r\n         * @type {DataSourceLayer[]}\r\n         */\r\n        this._layers = options.layers;\r\n        /**\r\n         * @type {Tile}\r\n         */\r\n        this._tile = options.tile;\r\n        /**\r\n         * @type {Object}\r\n         */\r\n        this.status = {};\r\n        Object.keys(this._layers).forEach((key) => {\r\n            this.status[key] = DataSource.State.Idle;\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} layer - Layer name\r\n     */\r\n    loading(layer) {\r\n        if (typeof this._layers[layer] === 'undefined') {\r\n            throw new Error('Unknowed layer was trigger datasource.');\r\n        }\r\n        this._layers[layer].processLoading(this._tile);\r\n    }\r\n    loaded(layer, data) {\r\n        if (!this._tile) {\r\n            // TODO: Dispose;\r\n            return;\r\n        }\r\n        if (this._tile.disposed) {\r\n            return;\r\n        } \r\n        if (typeof this._layers[layer] === 'undefined') {\r\n            throw new Error('Unknowed layer was trigger datasource.');\r\n        }\r\n        this._layers[layer].processData(this._tile, data);\r\n        if (this.done) {\r\n            this._tile.quadTree.needUpdate = true;\r\n        }\r\n    }\r\n    failed(layer, error) {\r\n        if (typeof this.status[layer] === 'undefined') {\r\n            throw new Error('Unknowed layer was trigger datasource.');\r\n        }\r\n        this._layers[layer].processError(this._tile, error);\r\n    }\r\n    isLoading(layer) {\r\n        return this.status[layer] >= DataSource.State.Loading;\r\n    }\r\n    dispose() {\r\n        Object.keys(this._layers).forEach((key) => {\r\n            this.status[key] = DataSource.State.Idle;\r\n        });\r\n        this._tile = undefined;\r\n    }\r\n    static toLayers(layers: DataSourceLayerConstructor[]) {\r\n        return layers.reduce((prev: { [key: string]: DataSourceLayer }, Instance) => {\r\n            prev[Instance.layerName] = new Instance();\r\n            return prev;\r\n        }, {});\r\n    }\r\n\r\n    get done() {\r\n        return Object.keys(this._layers).reduce((prev, key) =>\r\n            prev && this.status[key] === DataSource.State.Loaded, true);\r\n    }\r\n\r\n    get needsLoading() {\r\n        return Object.keys(this._layers).reduce((prev, key) =>\r\n            prev || this.status[key] < DataSource.State.Loaded, false);\r\n    }\r\n}\r\n","import { Tile } from '../SceneMode/Tile';\r\n\r\nexport interface DataSourceLayerConstructor {\r\n    new (): DataSourceLayer;\r\n\r\n    layerName;\r\n}\r\n\r\nexport abstract class DataSourceLayer {\r\n    static layerName = 'none';\r\n\r\n    abstract processLoading(tile: Tile);\r\n    abstract processData(tile: Tile, data: any);\r\n    abstract processError(tile: Tile, error: any);\r\n}\r\n","import * as THREE from 'three';\r\nimport { Tile2D } from '../SceneMode/Tile2D';\r\nimport { DataSource } from './DataSource';\r\nimport { DataSourceLayer } from './DataSourceLayer';\r\n\r\nexport class ImageDataLayer extends DataSourceLayer {\r\n    static layerName = 'texture';\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    processLoading(tile: Tile2D) {\r\n        tile.data.status[ImageDataLayer.layerName] = DataSource.State.Loading;\r\n    }\r\n\r\n    processData(tile: Tile2D, data: THREE.Texture) {\r\n        if (tile.material) {\r\n            throw new Error('Material\\'s already set up.');\r\n        }\r\n        tile.material = new THREE.MeshBasicMaterial({\r\n            map: data,\r\n        });\r\n\r\n        tile.data.status[ImageDataLayer.layerName] = DataSource.State.Loaded;\r\n    }\r\n\r\n    processError(tile: Tile2D, error: Error) {\r\n        tile.data.status[ImageDataLayer.layerName] = DataSource.State.Idle;\r\n    }\r\n}\r\n","import { Tile } from '../SceneMode/Tile';\r\n\r\nexport interface ProviderOptions {\r\n    maxLoad?: number;\r\n}\r\n\r\nexport abstract class Provider {\r\n    _maxLoad: number;\r\n    _loading: number;\r\n    _needUpdate: boolean;\r\n\r\n    constructor(options?: ProviderOptions) {\r\n        options = options || {};\r\n        this._maxLoad = options.maxLoad || 50;\r\n        this._loading = 0;\r\n    }\r\n\r\n    protected abstract url(x: number, y: number, z: number);\r\n\r\n    public abstract loadTile(tile: Tile);\r\n}\r\n","import * as THREE from 'three';\r\nimport { Tile } from '../SceneMode/Tile';\r\nimport { ImageDataLayer } from './ImageDataLayer';\r\nimport { Provider, ProviderOptions } from './Provider';\r\n\r\nexport interface ImageryProviderOptions extends ProviderOptions {}\r\n\r\nexport class ImageryProvider extends Provider {\r\n    constructor(options?: ImageryProviderOptions) {\r\n        super(options);\r\n    }\r\n\r\n    protected url(x: number, y: number, z: number) {\r\n        const serverIndex = 2 * (x % 2) + y % 2;\r\n        const server = ['a', 'b', 'c', 'd'][serverIndex];\r\n        return 'https://' + server + '.tiles.mapbox.com/v4/mapbox.satellite/' + z + '/' + x + '/' + y +\r\n            '@2x.png?access_token=pk.eyJ1IjoibWF0dCIsImEiOiJTUHZkajU0In0.oB-OGTMFtpkga8vC48HjIg';\r\n    }\r\n\r\n    loadTile(tile: Tile) {\r\n        if (this._loading >= this._maxLoad || tile.data.isLoading(ImageDataLayer.layerName)) {\r\n            return;\r\n        }\r\n\r\n        const onComplete = (resp) => {\r\n            this._needUpdate = true;\r\n            this._loading--;\r\n\r\n            if (tile.disposed) {\r\n                return;\r\n            }\r\n            tile.data.loaded(ImageDataLayer.layerName, texture);\r\n        };\r\n\r\n        const onError = (err) => {\r\n            if (err) {\r\n                if (tile.disposed) {\r\n                    return;\r\n                }\r\n                this._loading--;\r\n\r\n                console.error('Error loading texture' + tile.stringify);\r\n                tile.data.failed(ImageDataLayer.layerName, err);\r\n            }\r\n        };\r\n\r\n        this._loading++;\r\n        const texture = new THREE.TextureLoader()\r\n            .load(this.url(tile.x, tile.y, tile.z), onComplete.bind(this), undefined, onError.bind(this));\r\n        tile.data.loading(ImageDataLayer.layerName);\r\n    }\r\n}\r\n","import { Camera } from '../Renderer/Camera';\r\nimport { Cartesian } from './Cartesian';\r\n\r\nexport interface AABBOptions {\r\n    topLeftCorner: Cartesian;\r\n    bottomRightCorner: Cartesian;\r\n}\r\n\r\nconst UNIT_Y = new Cartesian({ x: 0.0, y: 1.0, z: 0.0 });\r\nconst t = [[0, 0], [0, 1], [1, 1], [1, 0]];\r\nconst c = new Cartesian();\r\nconst cameraCartesianPosition = new Cartesian();\r\n\r\nexport class AABB {\r\n    xMin: number;\r\n    yMin: number;\r\n    zMin: number;\r\n    xMax: number;\r\n    yMax: number;\r\n    zMax: number;\r\n    westNormal: Cartesian;\r\n    eastNormal: Cartesian;\r\n    northNormal: Cartesian;\r\n    southNormal: Cartesian;\r\n    northwestCornnerCartesian: Cartesian;\r\n    southeastCornnerCartesian: Cartesian;\r\n    _corner: Cartesian[];\r\n\r\n    constructor(options: AABBOptions) {\r\n        this.xMin = options.topLeftCorner.x || 0;\r\n        this.yMin = options.topLeftCorner.y || 0;\r\n        this.zMin = options.topLeftCorner.z || 0;\r\n        this.xMax = options.bottomRightCorner.x || 0;\r\n        this.yMax = options.bottomRightCorner.y || 0;\r\n        this.zMax = options.bottomRightCorner.z || 0;\r\n\r\n        // Compute the normal of the plane on the western edge of the tile.\r\n        const midPoint = new Cartesian();\r\n        midPoint.x = (this.xMax + this.xMin) / 2;\r\n        midPoint.z = (this.zMax + this.zMin) / 2;\r\n        const temp2 = new Cartesian();\r\n        const westernMidpointCartesian = new Cartesian();\r\n        westernMidpointCartesian.x = (this.xMax + this.xMin) / 2;\r\n        westernMidpointCartesian.z = this.zMin;\r\n        this.westNormal = new Cartesian();\r\n        this.westNormal.crossVectors(temp2.subVectors(midPoint, westernMidpointCartesian), UNIT_Y);\r\n        this.westNormal.normalize();\r\n        const easternMidpointCartesian = new Cartesian();\r\n        easternMidpointCartesian.x = (this.xMax + this.xMin) / 2;\r\n        easternMidpointCartesian.z = this.zMax;\r\n        this.eastNormal = new Cartesian();\r\n        this.eastNormal.crossVectors(temp2.subVectors(midPoint, easternMidpointCartesian), UNIT_Y);\r\n        this.eastNormal.normalize();\r\n        const northMidpointCartesian = new Cartesian();\r\n        northMidpointCartesian.x = this.xMax;\r\n        northMidpointCartesian.z = (this.zMax + this.zMin) / 2;\r\n        this.northNormal = new Cartesian();\r\n        this.northNormal.crossVectors(temp2.subVectors(midPoint, northMidpointCartesian), UNIT_Y);\r\n        this.northNormal.normalize();\r\n        const southMidpointCartesian = new Cartesian();\r\n        southMidpointCartesian.x = this.xMin;\r\n        southMidpointCartesian.z = (this.zMax + this.zMin) / 2;\r\n        this.southNormal = new Cartesian();\r\n        this.southNormal.crossVectors(temp2.subVectors(midPoint, southMidpointCartesian), UNIT_Y);\r\n        this.southNormal.normalize();\r\n        this.northwestCornnerCartesian = new Cartesian({ x: this.xMin, y: 0, z: this.zMin });\r\n        this.southeastCornnerCartesian = new Cartesian({ x: this.xMax, y: 0, z: this.zMax });\r\n        this._corner = new Array(4);\r\n        for (let i = 0; i < 4; ++i) {\r\n            // TODO: y\r\n            this._corner[i] = new Cartesian({\r\n                x: t[i][0] ? this.xMin : this.xMax,\r\n                y: 0,\r\n                z: t[i][1] ? this.zMin : this.zMax,\r\n            });\r\n        }\r\n    }\r\n    intersects(x, y, z) {\r\n        if (x instanceof AABB) {\r\n            const other = x;\r\n            return this.xMin < other.xMax && other.xMin < this.xMax &&\r\n                this.yMin < other.yMax && other.yMin < this.yMax &&\r\n                this.zMin < other.zMax && other.zMin < this.zMax;\r\n        }\r\n        return this.xMin <= x && this.xMax >= x &&\r\n            this.yMin <= y && this.yMax >= y &&\r\n            this.zMin <= z && this.zMax >= z;\r\n    }\r\n    onRect(x, z) {\r\n        return this.xMin <= x && this.xMax >= x &&\r\n            this.zMin <= z && this.zMax >= z;\r\n    }\r\n    distanceToCamera(camera: Camera) {\r\n        cameraCartesianPosition.set(\r\n            camera.position.x + camera.target.x,\r\n            camera.position.y + camera.target.y,\r\n            camera.position.z + camera.target.z,\r\n        );\r\n        return this.distanceFromPoint(cameraCartesianPosition);\r\n    }\r\n    distanceFromPoint(cartesian) {\r\n        const temp = new Cartesian();\r\n        let result = 0.0;\r\n        if (!this.onRect(cartesian.x, cartesian.z)) {\r\n            const northwestCornnerCartesian = this.northwestCornnerCartesian;\r\n            const southeastCornnerCartesian = this.southeastCornnerCartesian;\r\n            const westNormal = this.westNormal;\r\n            const southNormal = this.southNormal;\r\n            const eastNormal = this.eastNormal;\r\n            const northNormal = this.northNormal;\r\n            const vectorFromNorthwestCorner = temp.subVectors(cartesian, northwestCornnerCartesian);\r\n            const distanceToWestPlane = vectorFromNorthwestCorner.dot(westNormal);\r\n            const distanceToNorthPlane = vectorFromNorthwestCorner.dot(northNormal);\r\n            const vectorFromSoutheastCorner = temp.subVectors(cartesian, southeastCornnerCartesian);\r\n            const distanceToEastPlane = vectorFromSoutheastCorner.dot(eastNormal);\r\n            const distanceToSouthPlane = vectorFromSoutheastCorner.dot(southNormal);\r\n            if (distanceToWestPlane > 0.0) {\r\n                result += distanceToWestPlane * distanceToWestPlane;\r\n            } else if (distanceToEastPlane > 0.0) {\r\n                result += distanceToEastPlane * distanceToEastPlane;\r\n            }\r\n            if (distanceToSouthPlane > 0.0) {\r\n                result += distanceToSouthPlane * distanceToSouthPlane;\r\n            } else if (distanceToNorthPlane > 0.0) {\r\n                result += distanceToNorthPlane * distanceToNorthPlane;\r\n            }\r\n        }\r\n        const height = cartesian.height;\r\n        const distanceFromTop = height;\r\n        if (distanceFromTop > 0.0) {\r\n            result += distanceFromTop * distanceFromTop;\r\n        }\r\n        return Math.sqrt(result);\r\n    }\r\n\r\n    get corner() {\r\n        return this._corner;\r\n    }\r\n\r\n    get center() {\r\n        c.set(\r\n            (this.xMin + this.xMax) / 2,\r\n            (this.yMin + this.yMax) / 2,\r\n            (this.zMin + this.zMax) / 2,\r\n        );\r\n        return c;\r\n    }\r\n    get width() {\r\n        return this.xMax - this.xMin;\r\n    }\r\n    get height() {\r\n        return this.zMax - this.zMin;\r\n    }\r\n}\r\n","import { QuadTree } from '../Core/QuadTree';\r\nimport { TilingScheme } from '../Core/TilingScheme';\r\nimport { Provider } from '../DataSource/Provider';\r\nimport { AABB } from '../Math/AABB';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { Tile, TileConstructor } from './Tile';\r\n\r\nexport interface SceneModeOptions {\r\n    instance: TileConstructor;\r\n}\r\n\r\nconst topLeftCorner = new Cartesian();\r\nconst bottomRightCorner = new Cartesian();\r\n\r\nexport abstract class SceneMode {\r\n    providers: Provider[];\r\n    protected _tilingScheme: TilingScheme;\r\n    protected _instance: TileConstructor;\r\n\r\n    protected _topLeftCartographicCorner = QtPositioning.coordinate();\r\n    protected _bottomRightCartographicCorner = QtPositioning.coordinate();\r\n\r\n    constructor(options: SceneModeOptions) {\r\n        this._instance = options.instance;\r\n    }\r\n\r\n    getLevelMaximumGeometricError = function(level) {\r\n        return this._levelZeroMaximumGeometricError / (1 << level);\r\n    };\r\n\r\n    fog(distanceToCamera: number, density: number) {\r\n        const scalar = distanceToCamera * density;\r\n        return 1.0 - Math.exp(-(scalar * scalar));\r\n    }\r\n\r\n    screenSpaceError(quadTree: QuadTree, tile: Tile): number {\r\n        const camera = quadTree.camera;\r\n        const maxGeometricError = this.getLevelMaximumGeometricError(tile.z);\r\n\r\n        // Update distance of tile from camera\r\n        if (camera.updatedLastFrame || !tile.distance) {\r\n            tile.distance = tile.bbox.distanceToCamera(quadTree.camera);\r\n        }\r\n\r\n        const height = Math.max(quadTree.cameraController.canvas.height, quadTree.cameraController.canvas.width);\r\n        const sseDenominator = 2 * Math.tan(camera.fov * Math.PI / (2 * 180));\r\n\r\n        let error = (maxGeometricError * height) / (tile.distance * sseDenominator);\r\n\r\n        // TODO: Fof from Cesium\r\n        // if (frameState.fog.enabled) {\r\n        error = error - this.fog(tile.distance, 2.0e-4) * 2.0;\r\n        // }\r\n\r\n        return error;\r\n    }\r\n\r\n    getAABB(tile: Tile) {\r\n        // FIXME: FC\r\n        const width = 360.0 / this._tilingScheme.getNumberOfXTilesAtLevel(tile.z);\r\n        const height = 180.0 / this._tilingScheme.getNumberOfYTilesAtLevel(tile.z);\r\n        this._topLeftCartographicCorner.longitude = tile.x * width - 180.0;\r\n        this._topLeftCartographicCorner.altitude = 0;\r\n        this._topLeftCartographicCorner.latitude =  90.0 - tile.y * height;\r\n        sphericalMercator.FCartographicToCartesian(this._topLeftCartographicCorner, topLeftCorner);\r\n\r\n        this._bottomRightCartographicCorner.longitude = (tile.x + 1) * width - 180.0;\r\n        this._bottomRightCartographicCorner.altitude = 0;\r\n        this._bottomRightCartographicCorner.latitude = 90.0 - (tile.y + 1) * height;\r\n        sphericalMercator.FCartographicToCartesian(this._bottomRightCartographicCorner, bottomRightCorner);\r\n\r\n        return new AABB({ topLeftCorner, bottomRightCorner });\r\n    }\r\n\r\n    createRootTile(quadTree: QuadTree): Tile[] {\r\n        const numberOfLevelZeroTilesX = this._tilingScheme.getNumberOfXTilesAtLevel(0);\r\n        const numberOfLevelZeroTilesY = this._tilingScheme.getNumberOfYTilesAtLevel(0);\r\n\r\n        const result: Tile[] = new Array(numberOfLevelZeroTilesX * numberOfLevelZeroTilesY);\r\n\r\n        let index = 0;\r\n        for (let y = 0; y < numberOfLevelZeroTilesY; ++y) {\r\n            for (let x = 0; x < numberOfLevelZeroTilesX; ++x) {\r\n                result[index++] = new this._instance({\r\n                    x,\r\n                    y,\r\n                    z: 0,\r\n                    quadTree,\r\n                });\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected abstract get _levelZeroMaximumGeometricError();\r\n\r\n    get instance() { return this._instance; }\r\n}\r\n","import { MapSettings } from '../Core/MapSettings';\r\nimport { QuadTree } from '../Core/QuadTree';\r\nimport { DataSource } from '../DataSource/DataSource';\r\nimport { AABB } from '../Math/AABB';\r\n\r\nexport interface TileOptions {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    quadTree: QuadTree;\r\n    parent?: Tile;\r\n}\r\n\r\nexport interface TileConstructor {\r\n    new (options: TileOptions): Tile;\r\n    createMesh();\r\n}\r\n\r\nconst size = Array.apply(null, Array(32)).map((_, idx) => {\r\n    return MapSettings.basePlaneDimension / Math.pow(2, idx);\r\n});\r\n\r\nexport abstract class Tile {\r\n    static State = {\r\n        Start: 0,\r\n        Loading: 1,\r\n        Done: 2,\r\n        Failed: 3,\r\n        Removed: 4,\r\n    };\r\n\r\n    private _x: number;\r\n    private _y: number;\r\n    private _z: number;\r\n    private _quadTree: QuadTree;\r\n    private _parent: Tile;\r\n    private _state: number;\r\n    private _replacementPrevious: Tile;\r\n    private _replacementNext: Tile;\r\n    private _distance: number;\r\n    private _bbox: AABB;\r\n    upsampledFromParent: boolean;\r\n\r\n    private _children: Tile[];\r\n\r\n    private _mesh: THREE.Mesh;\r\n\r\n    constructor(options: TileOptions) {\r\n        this._x = options.x;\r\n        this._y = options.y;\r\n        this._z = options.z;\r\n        this._quadTree = options.quadTree;\r\n        // QuadTreeTile structure\r\n        this._parent = options.parent;\r\n        // State\r\n        this._state = Tile.State.Start;\r\n\r\n        this._replacementPrevious = undefined;\r\n        this._replacementNext = undefined;\r\n        this._distance = undefined;\r\n        this._bbox = undefined;\r\n        this.upsampledFromParent = false;\r\n\r\n        this._mesh = (this.constructor as TileConstructor).createMesh();\r\n    }\r\n\r\n    static createMesh() {\r\n        throw new Error('No createMesh in abstract Tile.');\r\n    }\r\n    abstract applyDataToMesh(mesh: THREE.Mesh): void;\r\n\r\n    dispose() {\r\n        // Remove link betweem parent\r\n        if (this._parent) {\r\n            for (let i = 0; i < 4; i++) {\r\n                if (this._parent._children[i] && this.stringify === this._parent._children[i].stringify) {\r\n                    this._parent._children[i] = undefined;\r\n                }\r\n            }\r\n        }\r\n        this._parent = undefined;\r\n        this._state = Tile.State.Removed;\r\n        this._bbox = undefined;\r\n        this.upsampledFromParent = false;\r\n        this.data.dispose();\r\n\r\n        if (this._children) {\r\n            for (let j = 0; j < 4; ++j) {\r\n                if (this._children[j]) {\r\n                    this._children[j].dispose();\r\n                    this._children[j] = undefined;\r\n                }\r\n            }\r\n        }\r\n        this._quadTree = undefined;\r\n    }\r\n\r\n    static size(z) {\r\n        return size[z];\r\n    }\r\n\r\n    get x() { return this._x; }\r\n    get y() { return this._y; }\r\n    get z() { return this._z; }\r\n    get parent() { return this._parent; }\r\n    get children() {\r\n        if (typeof this._children === 'undefined') {\r\n            this._children = new Array(4);\r\n        }\r\n\r\n        // FIXME: Type of instance\r\n        const Instance: TileConstructor = (this.constructor as any);\r\n\r\n        for (let i = 0; i < 4; ++i) {\r\n            if (typeof this._children[i] === 'undefined') {\r\n                this._children[i] = new Instance({\r\n                    x: this._x * 2 + i % 2,\r\n                    // Rounding float to integer ex. ~~2.5 = 2\r\n                    y: this._y * 2 + (~~(i / 2)) % 2,\r\n                    z: this._z + 1,\r\n                    parent: this,\r\n                    quadTree: this._quadTree,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this._children;\r\n    }\r\n    get replacementPrevious() { return this._replacementPrevious; }\r\n    set replacementPrevious(tile) { this._replacementPrevious = tile; }\r\n    get replacementNext() { return this._replacementNext; }\r\n    set replacementNext(tile) { this._replacementNext = tile; }\r\n    get distance() { return this._distance; }\r\n    set distance(distance) { this._distance = distance; }\r\n    get bbox() {\r\n        if (!this._bbox) {\r\n            this._bbox = this._quadTree.mode.getAABB(this);\r\n        }\r\n\r\n        return this._bbox;\r\n    }\r\n    get quadTree() { return this._quadTree; }\r\n    /************************\r\n     * State handling\r\n     ***********************/\r\n    get state() { throw new Error('derpercate'); }\r\n    get needsLoading() { return this.data.needsLoading; }\r\n    get renderable() { return this.data.done; }\r\n    get eligibleForUnloading() { return true; }\r\n    get disposed() { return this._state === Tile.State.Removed; }\r\n    get stringify() { return this._x + '/' + this._y + '/' + this._z; }\r\n\r\n    abstract get data(): DataSource;\r\n\r\n    get mesh(): THREE.Mesh {\r\n        return this._mesh;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { DataSource } from '../DataSource/DataSource';\r\nimport { ImageDataLayer } from '../DataSource/ImageDataLayer';\r\nimport { Tile, TileOptions } from './Tile';\r\n\r\nexport interface Tile2DOptions extends TileOptions {}\r\n\r\nconst image = new Image();\r\nexport class Tile2D extends Tile {\r\n    public static dataLayers = DataSource.toLayers([ImageDataLayer]);\r\n\r\n    public data: DataSource;\r\n    private _material: THREE.Material;\r\n\r\n    constructor(options: Tile2DOptions) {\r\n        super(options);\r\n        this.data = new DataSource({\r\n            layers: Tile2D.dataLayers,\r\n            tile: this,\r\n        });\r\n    }\r\n\r\n    static createMesh() {\r\n        const material = null;\r\n\r\n        const geometry = new THREE.PlaneGeometry(1, 1);\r\n        geometry.rotateX(-Math.PI / 2);\r\n\r\n        return new THREE.Mesh(geometry, material);\r\n    }\r\n\r\n    applyDataToMesh(mesh: THREE.Mesh) {\r\n        const tileSize = Tile.size(this.z);\r\n\r\n        mesh.scale.set(tileSize, 1, tileSize);\r\n\r\n        if (!this._material) {\r\n            throw new Error(`Material not ready to use. ${this.stringify}`);\r\n        }\r\n        mesh.material = this._material;\r\n    }\r\n\r\n    dispose() {\r\n        super.dispose();\r\n        if (this._material) {\r\n            this._material.dispose();\r\n        }\r\n        this._material = undefined;\r\n    }\r\n\r\n    get material() { return this._material; }\r\n    set material(m: THREE.Material) { this._material = m; }\r\n}\r\n","import { QuadTree } from '../Core/QuadTree';\r\nimport { TilingScheme } from '../Core/TilingScheme';\r\nimport { ImageryProvider } from '../DataSource/ImageryProvider';\r\nimport { AABB } from '../Math/AABB';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { Ellipsoid } from '../Math/Ellipsoid';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { SceneMode } from './SceneMode';\r\nimport { Tile } from './Tile';\r\nimport { Tile2D } from './Tile2D';\r\n\r\nfunction getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n    ellipsoid: Ellipsoid, tileImageWidth: number, numberOfTilesAtLevelZero: number) {\r\n    return ellipsoid.maximumRadius * 2 * Math.PI * 0.25 / (tileImageWidth * numberOfTilesAtLevelZero);\r\n}\r\n\r\nexport class Scene2D extends SceneMode {\r\n    protected _levelZeroMaximumGeometricError: number;\r\n    constructor() {\r\n        super({\r\n            instance: Tile2D,\r\n        });\r\n\r\n        this._tilingScheme = new TilingScheme({\r\n            numberOfLevelZeroTilesX: 1,\r\n            numberOfLevelZeroTilesY: 1,\r\n        });\r\n        this.providers = [\r\n            new ImageryProvider(),\r\n        ];\r\n\r\n        this._levelZeroMaximumGeometricError = getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n            this._tilingScheme.ellipsoid,\r\n            65,\r\n            this._tilingScheme.getNumberOfXTilesAtLevel(0),\r\n        );\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Tile2D } from '../SceneMode/Tile2D';\r\nimport { DataSource } from './DataSource';\r\nimport { DataSourceLayer } from './DataSourceLayer';\r\n\r\nexport class EPSG4326MapImageDataLayer extends DataSourceLayer {\r\n    static layerName = 'EPSG:4326';\r\n\r\n    static vertexShader = `\r\n        varying vec2 vUv;\r\n        varying vec3 vNormal;\r\n        varying vec3 vViewPosition;\r\n\r\n        void main() {\r\n\r\n            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n            vUv = uv;\r\n            vNormal = normalize( normalMatrix * normal );\r\n            vViewPosition = -mvPosition.xyz;\r\n\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n        }\r\n    `;\r\n    static fragmentShader = `\r\n        uniform sampler2D texture;\r\n        uniform sampler2D texture2;\r\n        uniform vec3 color;\r\n        varying vec2 vUv;\r\n        varying vec3 vNormal;\r\n        varying vec3 vViewPosition;\r\n\r\n        void main() {\r\n            if ( vUv.y < 0.5) {\r\n                vec2 halfvUv = vec2( vUv.x, vUv.y * 2.0 );\r\n                gl_FragColor = texture2D( texture2, halfvUv );\r\n            } else {\r\n                vec2 halfvUv = vec2( vUv.x, vUv.y * 2.0 - 1.0 );\r\n                gl_FragColor = texture2D( texture, halfvUv );\r\n            }\r\n\r\n            // hack in a fake pointlight at camera location, plus ambient\r\n            // vec3 normal = normalize( vNormal );\r\n            // vec3 lightDir = normalize( vViewPosition );\r\n\r\n            // float dotProduct = max( dot( normal, lightDir ), 0.0 ) + 0.2;\r\n\r\n            // //gl_FragColor = vec4( mix( tColor.rgb, tColor2.rgb, tColor2.a ), 1.0 ) * dotProduct;\r\n\r\n            // vec4 mix_c = tColor2 + tc * tColor2.a;\r\n            // gl_FragColor = vec4( mix( tColor.rgb, mix_c.xyz, tColor2.a ), 1.0 ) * dotProduct;\r\n            // gl_FragColor = vec4( vUv.x, vUv.y, 0.0, 1.0 );\r\n        }\r\n    `;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    processLoading(tile: Tile2D) {\r\n        tile.data.status[EPSG4326MapImageDataLayer.layerName] = DataSource.State.Loading;\r\n    }\r\n\r\n    processData(tile: Tile2D, data: [THREE.Texture, THREE.Texture]) {\r\n        if (tile.material) {\r\n            throw new Error('Material\\'s already set up.');\r\n        }\r\n        const uniforms = {\r\n            texture: { type: 't', value: data[0] },\r\n            texture2: { type: 't', value: data[1] },\r\n        };\r\n        tile.material = new THREE.ShaderMaterial({\r\n            uniforms,\r\n            vertexShader: EPSG4326MapImageDataLayer.vertexShader,\r\n            fragmentShader: EPSG4326MapImageDataLayer.fragmentShader,\r\n        });\r\n\r\n        tile.data.status[EPSG4326MapImageDataLayer.layerName] = DataSource.State.Loaded;\r\n    }\r\n\r\n    processError(tile: Tile2D, error: Error) {\r\n        tile.data.status[EPSG4326MapImageDataLayer.layerName] = DataSource.State.Idle;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Tile } from '../SceneMode/Tile';\r\nimport { EPSG4326MapImageDataLayer } from './EPSG4326MapImageDataLayer';\r\nimport { Provider, ProviderOptions } from './Provider';\r\n\r\nexport interface EPSG4326MapImageryProviderOptions extends ProviderOptions {\r\n    key?: string;\r\n}\r\n\r\nexport class EPSG4326MapImageryProvider extends Provider {\r\n    private _ready: boolean = false;\r\n\r\n    private _baseUrl: string;\r\n    private _subdomains: string[];\r\n    private _zoomMax: number;\r\n    private _zoomMin: number;\r\n\r\n    constructor(options?: EPSG4326MapImageryProviderOptions) {\r\n        super(options);\r\n\r\n        options = options || {};\r\n        const key = options.key || 'AlIY82q0z4SlJW9J3rfNWds2dBKwqw7Rb7EJXesX56XaO4ZM1AgXcFiV8MALrHhM';\r\n        const meta = new XMLHttpRequest();\r\n        meta.open('GET', 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/Aerial?key=' + key, true);\r\n\r\n        const onMetaComplete = () => {\r\n            const response = JSON.parse(meta.response);\r\n\r\n            const resources = response.resourceSets[0].resources[0];\r\n            this._baseUrl = resources.imageUrl;\r\n            this._subdomains = resources.imageUrlSubdomains;\r\n            this._zoomMax = resources.zoomMax;\r\n            this._zoomMin = resources.zoomMin - 1;\r\n            this._ready = true;\r\n        };\r\n        meta.addEventListener('load', onMetaComplete.bind(this));\r\n        meta.send(null);\r\n    }\r\n\r\n    tileXYToQuadKey(x, y, level) {\r\n        let quadkey = '';\r\n        for (let i = level; i >= 0; --i) {\r\n            const bitmask = 1 << i;\r\n            let digit = 0;\r\n\r\n            if ((x & bitmask) !== 0) {\r\n                digit |= 1;\r\n            }\r\n\r\n            if ((y & bitmask) !== 0) {\r\n                digit |= 2;\r\n            }\r\n\r\n            quadkey += digit;\r\n        }\r\n        return quadkey;\r\n    }\r\n\r\n    protected url(x: number, y: number, z: number) {\r\n        const subdomains = this._subdomains;\r\n        const subdomainIndex = (x + y + z) % subdomains.length;\r\n\r\n        const replaceParameters = {\r\n            subdomain: subdomains[subdomainIndex],\r\n            quadkey: this.tileXYToQuadKey(x, y, z),\r\n        };\r\n\r\n        const url = Object.keys(replaceParameters).reduce((prev, key) => {\r\n            const value = replaceParameters[key];\r\n            return prev.replace(new RegExp('{' + key + '}', 'g'), encodeURIComponent(value));\r\n        }, this._baseUrl);\r\n\r\n        return url;\r\n    }\r\n\r\n    loadTile(tile: Tile) {\r\n        if (!this._ready) {\r\n            tile.quadTree.needUpdate = true;\r\n            return;\r\n        }\r\n        if (this._loading >= this._maxLoad || tile.data.isLoading(EPSG4326MapImageDataLayer.layerName)) {\r\n            return;\r\n        }\r\n\r\n        // FIXME: Debugging\r\n        // if (tile.z >= 1) return;\r\n\r\n        let doneCount = 0;\r\n\r\n        const onComplete = (resp) => {\r\n            this._needUpdate = true;\r\n            this._loading--;\r\n\r\n            if (tile.disposed) {\r\n                return;\r\n            }\r\n\r\n            doneCount++;\r\n            if (doneCount === 2) {\r\n                tile.data.loaded(EPSG4326MapImageDataLayer.layerName, [t0, t1]);\r\n            }\r\n        };\r\n\r\n        const onError = (err) => {\r\n            if (err) {\r\n                if (tile.disposed) {\r\n                    return;\r\n                }\r\n                this._loading--;\r\n\r\n                console.error('Error loading texture' + tile.stringify);\r\n                tile.data.failed(EPSG4326MapImageDataLayer.layerName, err);\r\n            }\r\n        };\r\n\r\n        this._loading++;\r\n        const t0 = new THREE.TextureLoader()\r\n            .load(this.url(tile.x, tile.y * 2, tile.z), onComplete.bind(this), undefined, onError.bind(this));\r\n        const t1 = new THREE.TextureLoader()\r\n            .load(this.url(tile.x, tile.y * 2 + 1, tile.z), onComplete.bind(this), undefined, onError.bind(this));\r\n        tile.data.loading(EPSG4326MapImageDataLayer.layerName);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { DataSource } from '../DataSource/DataSource';\r\nimport { EPSG4326MapImageDataLayer } from '../DataSource/EPSG4326MapImageDataLayer';\r\nimport { TestDataLayer } from '../DataSource/TestDataLayer';\r\nimport { Tile, TileOptions } from '../SceneMode/Tile';\r\n\r\nexport interface Tile2DOptions extends TileOptions {}\r\n\r\nconst image = new Image();\r\nexport class TestTile extends Tile {\r\n    private static dataLayers = DataSource.toLayers([EPSG4326MapImageDataLayer]);\r\n\r\n    private _material: THREE.Material;\r\n    public data: DataSource;\r\n\r\n    constructor(options: Tile2DOptions) {\r\n        super(options);\r\n        this.data = new DataSource({\r\n            layers: TestTile.dataLayers,\r\n            tile: this,\r\n        });\r\n    }\r\n\r\n    static createMesh() {\r\n        const material = new THREE.MeshBasicMaterial({\r\n            wireframe: true,\r\n            opacity: 0,\r\n        });\r\n\r\n        const geometry = new THREE.PlaneGeometry(1, 1);\r\n        geometry.rotateX(-Math.PI / 2);\r\n\r\n        return new THREE.Mesh(geometry, material);\r\n    }\r\n\r\n    applyDataToMesh(mesh: THREE.Mesh) {\r\n        // const tileSize = Tile.size(this.z);\r\n\r\n        // mesh.scale.set(tileSize / 2, 1, tileSize);\r\n        const tileSize = Tile.size(this.z);\r\n\r\n        mesh.material = this._material;\r\n\r\n        mesh.scale.set(tileSize / 2, 10, tileSize);\r\n    }\r\n\r\n    dispose() {\r\n        super.dispose();\r\n    }\r\n\r\n    get material() { return this._material; }\r\n    set material(m) { this._material = m; }\r\n}\r\n","import { QuadTree } from '../Core/QuadTree';\r\nimport { TilingScheme } from '../Core/TilingScheme';\r\nimport { EPSG4326MapImageryProvider } from '../DataSource/EPSG4326MapImageryProvider';\r\nimport { TestProvider } from '../DataSource/TestProvider';\r\nimport { Ellipsoid } from '../Math/Ellipsoid';\r\nimport { SceneMode } from './SceneMode';\r\nimport { TestTile } from './TestTile';\r\n\r\nfunction getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n    ellipsoid: Ellipsoid, tileImageWidth: number, numberOfTilesAtLevelZero: number) {\r\n    return ellipsoid.maximumRadius * 2 * Math.PI * 0.25 / (tileImageWidth * numberOfTilesAtLevelZero);\r\n}\r\n\r\nexport class TestScene extends SceneMode {\r\n    _levelZeroMaximumGeometricError: number;\r\n    constructor() {\r\n        super({\r\n            instance: TestTile,\r\n        });\r\n\r\n        this._tilingScheme = new TilingScheme({\r\n            numberOfLevelZeroTilesX: 2,\r\n            numberOfLevelZeroTilesY: 1,\r\n        });\r\n        this.providers = [\r\n            new EPSG4326MapImageryProvider(),\r\n            // new TestProvider(),\r\n        ];\r\n\r\n        this._levelZeroMaximumGeometricError = getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n            this._tilingScheme.ellipsoid,\r\n            65,\r\n            this._tilingScheme.getNumberOfXTilesAtLevel(0),\r\n        );\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Tile } from '../SceneMode/Tile';\r\nimport { ImageryProvider } from './ImageryProvider';\r\nimport { Provider, ProviderOptions } from './Provider';\r\n\r\nexport interface BingMapImageryProviderOptions extends ProviderOptions {\r\n    key?: string;\r\n}\r\n\r\nexport class BingMapImageryProvider extends ImageryProvider {\r\n    private _ready: boolean = false;\r\n\r\n    private _baseUrl: string;\r\n    private _subdomains: string[];\r\n    private _zoomMax: number;\r\n    private _zoomMin: number;\r\n\r\n    constructor(options?: BingMapImageryProviderOptions) {\r\n        super(options);\r\n\r\n        options = options || {};\r\n        const key = options.key || 'AlIY82q0z4SlJW9J3rfNWds2dBKwqw7Rb7EJXesX56XaO4ZM1AgXcFiV8MALrHhM';\r\n        const meta = new XMLHttpRequest();\r\n        meta.open('GET', 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/Aerial?key=' + key, true);\r\n\r\n        const onMetaComplete = () => {\r\n            const response = JSON.parse(meta.response);\r\n\r\n            const resources = response.resourceSets[0].resources[0];\r\n            this._baseUrl = resources.imageUrl;\r\n            this._subdomains = resources.imageUrlSubdomains;\r\n            this._zoomMax = resources.zoomMax;\r\n            this._zoomMin = resources.zoomMin - 1;\r\n            this._ready = true;\r\n        };\r\n        meta.addEventListener('load', onMetaComplete.bind(this));\r\n        meta.send(null);\r\n    }\r\n\r\n    tileXYToQuadKey(x, y, level) {\r\n        let quadkey = '';\r\n        for (let i = level; i >= 0; --i) {\r\n            const bitmask = 1 << i;\r\n            let digit = 0;\r\n\r\n            if ((x & bitmask) !== 0) {\r\n                digit |= 1;\r\n            }\r\n\r\n            if ((y & bitmask) !== 0) {\r\n                digit |= 2;\r\n            }\r\n\r\n            quadkey += digit;\r\n        }\r\n        return quadkey;\r\n    }\r\n\r\n    protected url(x: number, y: number, z: number) {\r\n        const subdomains = this._subdomains;\r\n        const subdomainIndex = (x + y + z) % subdomains.length;\r\n\r\n        const replaceParameters = {\r\n            subdomain: subdomains[subdomainIndex],\r\n            quadkey: this.tileXYToQuadKey(x, y, z),\r\n        };\r\n\r\n        const url = Object.keys(replaceParameters).reduce((prev, key) => {\r\n            const value = replaceParameters[key];\r\n            return prev.replace(new RegExp('{' + key + '}', 'g'), encodeURIComponent(value));\r\n        }, this._baseUrl);\r\n\r\n        return url;\r\n    }\r\n\r\n    loadTile(tile: Tile) {\r\n        if (!this._ready) {\r\n            tile.quadTree.needUpdate = true;\r\n            return;\r\n        }\r\n\r\n        super.loadTile(tile);\r\n    }\r\n}\r\n","import { QuadTree } from '../Core/QuadTree';\r\nimport { TilingScheme } from '../Core/TilingScheme';\r\nimport { BingMapImageryProvider } from '../DataSource/BingMapImageryProvider';\r\nimport { Ellipsoid } from '../Math/Ellipsoid';\r\nimport { SceneMode } from './SceneMode';\r\nimport { Tile2D } from './Tile2D';\r\n\r\nfunction getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n    ellipsoid: Ellipsoid, tileImageWidth: number, numberOfTilesAtLevelZero: number) {\r\n    return ellipsoid.maximumRadius * 2 * Math.PI * 0.25 / (tileImageWidth * numberOfTilesAtLevelZero);\r\n}\r\n\r\nexport class BingMapScene extends SceneMode {\r\n    _levelZeroMaximumGeometricError: number;\r\n    constructor() {\r\n        super({\r\n            instance: Tile2D,\r\n        });\r\n\r\n        this._tilingScheme = new TilingScheme({\r\n            numberOfLevelZeroTilesX: 2,\r\n            numberOfLevelZeroTilesY: 2,\r\n        });\r\n        this.providers = [\r\n            new BingMapImageryProvider(),\r\n        ];\r\n\r\n        this._levelZeroMaximumGeometricError = getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n            this._tilingScheme.ellipsoid,\r\n            45,\r\n            this._tilingScheme.getNumberOfXTilesAtLevel(0),\r\n        );\r\n    }\r\n}\r\n","export function highwaterDecode(indices: Uint16Array) {\n    const arr: number[] = [];\n\n    let highest = 0;\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < indices.length; ++i) {\n        const code = indices[i];\n        arr.push(highest - code);\n        if (code === 0) {\n            ++highest;\n        }\n    }\n    return arr;\n}\n\nexport function zigZagDecode(value) {\n    return (value >> 1) ^ (-(value & 1));\n}\n\nexport function getUint32Array(data, startPos, count) {\n    return new Uint32Array(data.slice(startPos, startPos + 4 * count));\n}\nexport function getUint32(data, startPos) {\n    return getUint32Array(data, startPos, 1)[0];\n}\nexport function getUint16Array(data, startPos, count) {\n    return new Uint16Array(data.slice(startPos, startPos + 2 * count));\n}\nexport function getUint16(data, startPos) {\n    return getUint16Array(data, startPos, 1)[0];\n}\nexport function getFloat64Array(data, startPos, count) {\n    return new Float64Array(data.slice(startPos, startPos + 8 * count));\n}\nexport function getFloat64(data, startPos) {\n    return getFloat64Array(data, startPos, 1)[0];\n}\nexport function getFloat32Array(data, startPos, count) {\n    return new Float32Array(data.slice(startPos, startPos + 4 * count));\n}\nexport function getFloat32(data, startPos) {\n    return getFloat32Array(data, startPos, 1)[0];\n}\n\nexport const UINT16_BYTE_SIZE = 2;\nexport const UINT32_BYTE_SIZE = 4;\nexport const FLOAT64_BYTE_SIZE = 8;\nexport const FLOAT32_BYTE_SIZE = 4;\n","import * as THREE from 'three';\r\nimport { TileReplacementQueue } from '../Core/TileReplacementQueue';\r\nimport { STKTerrainTile } from '../SceneMode/STKTerrainTile';\r\nimport { MapUtility } from '../Utility/MapUtility';\r\nimport { DataSource } from './DataSource';\r\nimport { DataSourceLayer } from './DataSourceLayer';\r\nimport { QuantizedMesh } from './STKTerrainProvider';\r\n\r\nconst maxShort = 32767;\r\n\r\nexport class STKTerrainDataLayer extends DataSourceLayer {\r\n    static layerName = 'terrain-stk';\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getVertices(header, uArray, vArray, heightArray, indexArray) {\r\n        return uArray.reduce((prev, _, index) => {\r\n            prev.push(new THREE.Vector3(\r\n                uArray[index] / maxShort - 0.5,\r\n                MapUtility.lerp(header.minimumHeight, header.maximumHeight, heightArray[index] / maxShort)\r\n                    + header.minimumHeight,\r\n                0.5 - vArray[index] / maxShort,\r\n            ));\r\n            return prev;\r\n        }, []);\r\n    }\r\n\r\n    getFaces(header, uArray, vArray, heightArray, indexArray) {\r\n        const faces = [];\r\n        for (let i = 0; i < indexArray.length; i += 3) {\r\n            faces.push(new THREE.Face3(indexArray[i + 0], indexArray[i + 1], indexArray[i + 2]));\r\n        }\r\n        return faces;\r\n    }\r\n\r\n    getFaceVertexUvs(header, uArray, vArray, heightArray, indexArray) {\r\n        const verticesUv = uArray.reduce((prev, _, index) => {\r\n            prev.push(new THREE.Vector2(\r\n                uArray[index] / 32767,\r\n                vArray[index] / 32767,\r\n            ));\r\n            return prev;\r\n        }, []);\r\n\r\n        const faceVertexUvs = [];\r\n        for (let i = 0; i < indexArray.length; i += 3) {\r\n            faceVertexUvs.push([\r\n                verticesUv[indexArray[i + 0]],\r\n                verticesUv[indexArray[i + 1]],\r\n                verticesUv[indexArray[i + 2]],\r\n            ]);\r\n        }\r\n        return faceVertexUvs;\r\n    }\r\n\r\n    processLoading(tile: STKTerrainTile) {\r\n        tile.data.status[STKTerrainDataLayer.layerName] = DataSource.State.Loading;\r\n    }\r\n\r\n    processData(tile: STKTerrainTile, data: QuantizedMesh) {\r\n        const header = data.header;\r\n        const uArray = data.uArray;\r\n        const vArray = data.vArray;\r\n        const heightArray = data.heightArray;\r\n        const indexArray = data.indexArray;\r\n\r\n        const vertices = this.getVertices(header, uArray, vArray, heightArray, indexArray);\r\n        const faces = this.getFaces(header, uArray, vArray, heightArray, indexArray);\r\n\r\n        tile.geometry = new THREE.Geometry();\r\n        tile.geometry.vertices = vertices;\r\n        tile.geometry.faces = faces;\r\n\r\n        tile.geometry.computeFaceNormals();\r\n        tile.geometry.computeVertexNormals();\r\n        tile.geometry.faceVertexUvs[0] = this.getFaceVertexUvs(header, uArray, vArray, heightArray, indexArray);\r\n        tile.geometry.uvsNeedUpdate = true;\r\n\r\n        // tile.bbox.yMin = header.minimumHeight;\r\n        // tile.bbox.yMax = header.maximumHeight;\r\n        // console.log(tile.bbox.center, header.centerX, header.centerY, header.centerZ)\r\n\r\n        tile.data.status[STKTerrainDataLayer.layerName] = DataSource.State.Loaded;\r\n    }\r\n\r\n    processError(tile: STKTerrainTile, error: Error) {\r\n        tile.data.status[STKTerrainDataLayer.layerName] = DataSource.State.Idle;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Tile } from '../SceneMode/Tile';\r\nimport * as c from '../Utility/TypeConversion';\r\nimport { Provider, ProviderOptions } from './Provider';\r\nimport { STKTerrainDataLayer } from './STKTerrainDataLayer';\r\n\r\nexport interface STKTerrainProviderOptions extends ProviderOptions {}\r\n\r\nexport namespace QuantizedMesh {\r\n    export interface Header {\r\n        bytes: number;\r\n        centerX: number;\r\n        centerY: number;\r\n        centerZ: number;\r\n        minimumHeight: number;\r\n        maximumHeight: number;\r\n        boundingSphereCenterX: number;\r\n        boundingSphereCenterY: number;\r\n        boundingSphereCenterZ: number;\r\n        boundingSphereRadius: number;\r\n        horizonOcclusionPointX: number;\r\n        horizonOcclusionPointY: number;\r\n        horizonOcclusionPointZ: number;\r\n    }\r\n}\r\n\r\nexport interface QuantizedMesh {\r\n    header: QuantizedMesh.Header;\r\n    uArray: Uint16Array;\r\n    vArray: Uint16Array;\r\n    heightArray: Uint16Array;\r\n    indexArray: number[];\r\n}\r\n\r\nexport class STKTerrainProvider extends Provider {\r\n    private _ready: boolean = false;\r\n    private _baseUrl: string;\r\n    private _zoomMax: number;\r\n    private _zoomMin: number;\r\n    private _version: string;\r\n    private _projection: string;\r\n\r\n    constructor(options?: STKTerrainProviderOptions) {\r\n        super(options);\r\n\r\n        const meta = new XMLHttpRequest();\r\n        // meta.open('GET', 'http://assets.agi.com/stk-terrain/v1/tilesets/world/tiles/layer.json', true);\r\n        meta.open('GET', './layer.json', true);\r\n\r\n        const onMetaComplete = () => {\r\n            const response = JSON.parse(meta.response);\r\n            this._baseUrl = `http://assets.agi.com/stk-terrain/v1/tilesets/world/tiles/${response.tiles}`;\r\n            this._zoomMax = response.maxzoom;\r\n            this._zoomMin = response.minzoom;\r\n            this._version = response.version;\r\n            this._projection = response.projection;\r\n\r\n            this._ready = true;\r\n        };\r\n        meta.setRequestHeader('Accept', 'application/json,*/*;q=0.01');\r\n        meta.addEventListener('load', onMetaComplete.bind(this));\r\n        meta.send(null);\r\n    }\r\n\r\n    url(x: number, y: number, z: number) {\r\n        const replaceParameters = {\r\n            x,\r\n            y: (1 << z) - 1 - y,\r\n            z,\r\n            version: this._version,\r\n        };\r\n\r\n        const url = Object.keys(replaceParameters).reduce((prev, key) => {\r\n            const value = replaceParameters[key];\r\n            return prev.replace(new RegExp('{' + key + '}', 'g'), encodeURIComponent(value));\r\n        }, this._baseUrl);\r\n\r\n        return url;\r\n    }\r\n\r\n    getHeader(data, byteCount): QuantizedMesh.Header {\r\n        return {\r\n            bytes: data.byteLength,\r\n            centerX: c.getFloat64(data, byteCount),\r\n            centerY: c.getFloat64(data, byteCount + 8),\r\n            centerZ: c.getFloat64(data, byteCount + 16),\r\n            minimumHeight: c.getFloat32(data, byteCount + 24),\r\n            maximumHeight: c.getFloat32(data, byteCount + 28),\r\n            boundingSphereCenterX: c.getFloat64(data, byteCount + 32),\r\n            boundingSphereCenterY: c.getFloat64(data, byteCount + 40),\r\n            boundingSphereCenterZ: c.getFloat64(data, byteCount + 48),\r\n            boundingSphereRadius: c.getFloat64(data, byteCount + 56),\r\n            horizonOcclusionPointX: c.getFloat64(data, byteCount + 64),\r\n            horizonOcclusionPointY: c.getFloat64(data, byteCount + 72),\r\n            horizonOcclusionPointZ: c.getFloat64(data, byteCount + 80),\r\n        };\r\n    }\r\n\r\n    parseTile(data): QuantizedMesh {\r\n        let byteCount = 0;\r\n\r\n        const header = this.getHeader(data, byteCount);\r\n        byteCount += 88;\r\n\r\n        const vertexCount = c.getUint32(data, byteCount);\r\n        byteCount += c.UINT32_BYTE_SIZE;\r\n\r\n        const uArray = c.getUint16Array(data, byteCount, vertexCount);\r\n        byteCount += vertexCount * c.UINT16_BYTE_SIZE;\r\n\r\n        const vArray = c.getUint16Array(data, byteCount, vertexCount);\r\n        byteCount += vertexCount * c.UINT16_BYTE_SIZE;\r\n\r\n        const heightArray = c.getUint16Array(data, byteCount, vertexCount);\r\n        byteCount += vertexCount * c.UINT16_BYTE_SIZE;\r\n\r\n        let i;\r\n        let u = 0;\r\n        let v = 0;\r\n        let height = 0;\r\n\r\n        for (i = 0; i < uArray.length; ++i) {\r\n            u += c.zigZagDecode(uArray[i]);\r\n            v += c.zigZagDecode(vArray[i]);\r\n            height += c.zigZagDecode(heightArray[i]);\r\n\r\n            uArray[i] = u;\r\n            vArray[i] = v;\r\n            heightArray[i] = height;\r\n        }\r\n\r\n        if (byteCount % 2 !== 0) {\r\n            byteCount += (2 - (byteCount % 2));\r\n        }\r\n\r\n        const triangleCount = c.getUint32(data, byteCount);\r\n        byteCount += c.UINT32_BYTE_SIZE;\r\n\r\n        const indices = c.getUint16Array(data, byteCount, triangleCount * 3);\r\n        byteCount += triangleCount * 3 * 2;\r\n\r\n        const indexArray = c.highwaterDecode(indices);\r\n        return { header, uArray, vArray, heightArray, indexArray };\r\n    }\r\n\r\n    loadTile(tile: Tile) {\r\n        if (!this._ready) {\r\n            tile.quadTree.needUpdate = true;\r\n            return;\r\n        }\r\n\r\n        if (this._loading >= this._maxLoad || tile.data.isLoading(STKTerrainDataLayer.layerName)) {\r\n            return;\r\n        }\r\n\r\n        // FIXME: Debugging\r\n        // if (tile.z >= 1) return;\r\n\r\n        this._loading++;\r\n\r\n        const onComplete = (resp) => {\r\n            this._needUpdate = true;\r\n            this._loading--;\r\n\r\n            if (tile.disposed) {\r\n                return;\r\n            }\r\n            tile.data.loaded(STKTerrainDataLayer.layerName, this.parseTile(xhr.response));\r\n        };\r\n\r\n        const onError = (err) => {\r\n            if (err) {\r\n                if (tile.disposed) {\r\n                    return;\r\n                }\r\n                this._loading--;\r\n\r\n                console.error('Error loading stk-terrain' + tile.stringify);\r\n                tile.data.failed(STKTerrainDataLayer.layerName, err);\r\n            }\r\n        };\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', this.url(tile.x, tile.y, tile.z), true);\r\n        xhr.setRequestHeader('Accept', ' application/vnd.quantized-mesh,application/octet-stream;q=1.0');\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.onload = onComplete;\r\n        xhr.send(null);\r\n\r\n        tile.data.loading(STKTerrainDataLayer.layerName);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { DataSource } from '../DataSource/DataSource';\r\nimport { EPSG4326MapImageDataLayer } from '../DataSource/EPSG4326MapImageDataLayer';\r\nimport { STKTerrainDataLayer } from '../DataSource/STKTerrainDataLayer';\r\nimport { TestDataLayer } from '../DataSource/TestDataLayer';\r\nimport { Tile, TileOptions } from '../SceneMode/Tile';\r\n\r\nexport interface STKTerrainTileOptions extends TileOptions {}\r\n\r\nconst image = new Image();\r\nexport class STKTerrainTile extends Tile {\r\n    static dataLayers = DataSource.toLayers([\r\n        EPSG4326MapImageDataLayer,\r\n        STKTerrainDataLayer,\r\n    ]);\r\n\r\n    public data: DataSource;\r\n    private _material: THREE.Material;\r\n    private _geometry: THREE.Geometry;\r\n\r\n    constructor(options: STKTerrainTileOptions) {\r\n        super(options);\r\n        this.data = new DataSource({\r\n            layers: STKTerrainTile.dataLayers,\r\n            tile: this,\r\n        });\r\n    }\r\n\r\n    static createMesh() {\r\n        const material = new THREE.MeshBasicMaterial({\r\n            wireframe: true,\r\n            opacity: 0,\r\n        });\r\n\r\n        const geometry = new THREE.PlaneBufferGeometry(1, 1, 2, 2);\r\n\r\n        return new THREE.Mesh(geometry, material);\r\n    }\r\n\r\n    applyDataToMesh(mesh: THREE.Mesh) {\r\n        const tileSize = Tile.size(this.z);\r\n\r\n        mesh.material = this._material;\r\n\r\n        mesh.scale.set(\r\n            this.bbox.width,\r\n            1,\r\n            this.bbox.height,\r\n        );\r\n\r\n        mesh.geometry = this._geometry;\r\n\r\n        mesh.position.y = this.bbox.yMin;\r\n    }\r\n\r\n    dispose() {\r\n        super.dispose();\r\n    }\r\n\r\n    get geometry() { return this._geometry; }\r\n    set geometry(g) { this._geometry = g; }\r\n    get material() { return this._material; }\r\n    set material(m) { this._material = m; }\r\n}\r\n","import { QuadTree } from '../Core/QuadTree';\r\nimport { TilingScheme } from '../Core/TilingScheme';\r\nimport { EPSG4326MapImageryProvider } from '../DataSource/EPSG4326MapImageryProvider';\r\nimport { STKTerrainProvider } from '../DataSource/STKTerrainProvider';\r\nimport { AABB } from '../Math/AABB';\r\nimport { Cartesian } from '../Math/Cartesian';\r\nimport { Ellipsoid } from '../Math/Ellipsoid';\r\nimport { sphericalMercator } from '../Utility/SphericalMercator';\r\nimport { SceneMode } from './SceneMode';\r\nimport { STKTerrainTile } from './STKTerrainTile';\r\nimport { Tile } from './Tile';\r\n\r\nfunction getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n    ellipsoid: Ellipsoid, tileImageWidth: number, numberOfTilesAtLevelZero: number) {\r\n    return ellipsoid.maximumRadius * 2 * Math.PI * 0.25 / (tileImageWidth * numberOfTilesAtLevelZero);\r\n}\r\n\r\nconst topLeftCorner = new Cartesian();\r\nconst bottomRightCorner = new Cartesian();\r\n\r\nexport class STKTerrainScene extends SceneMode {\r\n    protected _levelZeroMaximumGeometricError: number;\r\n    constructor() {\r\n        super({\r\n            instance: STKTerrainTile,\r\n        });\r\n\r\n        this._tilingScheme = new TilingScheme({\r\n            numberOfLevelZeroTilesX: 2,\r\n            numberOfLevelZeroTilesY: 1,\r\n        });\r\n        this.providers = [\r\n            new EPSG4326MapImageryProvider(),\r\n            new STKTerrainProvider(),\r\n        ];\r\n\r\n        this._levelZeroMaximumGeometricError = getEstimatedLevelZeroGeometricErrorForAHeightmap(\r\n            this._tilingScheme.ellipsoid,\r\n            45,\r\n            this._tilingScheme.getNumberOfYTilesAtLevel(0),\r\n        );\r\n    }\r\n\r\n    // getAABB(tile: Tile) {\r\n    //     // FIXME: FC\r\n    //     const width = 360.0 / this._tilingScheme.getNumberOfXTilesAtLevel(tile.z);\r\n    //     const height = 180.0 / this._tilingScheme.getNumberOfYTilesAtLevel(tile.z);\r\n    //     this._topLeftCartographicCorner.longitude = tile.x * width - 180.0;\r\n    //     this._topLeftCartographicCorner.altitude = 0;\r\n    //     this._topLeftCartographicCorner.latitude = tile.y * height - 90.0;\r\n    //     sphericalMercator.CartographicToEPSG4326(this._topLeftCartographicCorner, topLeftCorner);\r\n\r\n    //     this._bottomRightCartographicCorner.longitude = (tile.x + 1) * width - 180.0;\r\n    //     this._bottomRightCartographicCorner.altitude = 0;\r\n    //     this._bottomRightCartographicCorner.latitude = (tile.y + 1) * height - 90.0;\r\n    //     sphericalMercator.CartographicToEPSG4326(this._bottomRightCartographicCorner, bottomRightCorner);\r\n\r\n    //     return new AABB({ topLeftCorner, bottomRightCorner });\r\n    // }\r\n}\r\n"],"names":["THREE.Matrix4","THREE.Vector3","THREE.Vector2","tslib_1.__extends","THREE.CylinderGeometry","THREE.Mesh","THREE.MeshBasicMaterial","THREE.Geometry","THREE.LineSegments","THREE.LineBasicMaterial","THREE.Group","THREE.Raycaster","panStart","picker","panEnd","panDelta","px","THREE.CubeTexture","THREE.RGBFormat","TextureLoader","THREE.DoubleSide","THREE.MeshFaceMaterial","THREE.CubeGeometry","THREE.Face3","THREE.PerspectiveCamera","THREE.Quaternion","screenPosition","THREE.MOUSE","THREE.EventDispatcher","THREE.Frustum","THREE.Scene","THREE.TextureLoader","t","THREE.PlaneGeometry","THREE.ShaderMaterial","image","getEstimatedLevelZeroGeometricErrorForAHeightmap","c.getFloat64","c.getFloat32","c.getUint32","c.UINT32_BYTE_SIZE","c.getUint16Array","c.UINT16_BYTE_SIZE","c.zigZagDecode","c.highwaterDecode","THREE.PlaneBufferGeometry","topLeftCorner","bottomRightCorner"],"mappings":"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"}